/-
File: squash_dict_code.lean

Autogenerated file.
-/
import starkware.cairo.lean.semantics.soundness.hoare

variables {F : Type} [field F] [decidable_eq F]

/- function starkware.cairo.common.math.assert_le_felt code definition -/

def starkware.cairo.common.math.code_assert_le_felt : list F := [
  'assert_eq[op0:='op0[fp+ -5], 'dst[ap] === 'res['op1[op0]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -5], 'dst[ap] === 'res['op1[op0+ 1]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -1], 'dst[ap] === 'res[op0* 'op1[imm]];ap++].to_nat,
  3544607988759775765608368578435044694,
  'assert_eq[op0:='op0[ap+ -3], 'dst[ap] === 'res[op0+ 'op1[ap+ -1]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -5], 'dst[ap] === 'res['op1[op0+ 2]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -5], 'dst[ap] === 'res['op1[op0+ 3]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -1], 'dst[ap] === 'res[op0* 'op1[imm]];ap++].to_nat,
  5316911983139663648412552867652567041,
  'assert_eq[op0:='op0[ap+ -3], 'dst[ap] === 'res[op0+ 'op1[ap+ -1]];ap++].to_nat,
  'jnz_rel['op1[imm], 'dst[ap];ap++].to_nat,
  14,
  'assert_eq['dst[ap] === 'res['op1[imm]];ap++].to_nat,
  -1,
  'assert_eq[op0:='op0[ap], 'dst[ap+ -1] === 'res[op0+ 'op1[fp+ -4]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -8], 'dst[ap+ -1] === 'res[op0+ 'op1[ap+ -4]]].to_nat,
  'assert_eq[op0:='op0[ap], 'dst[fp+ -4] === 'res[op0+ 'op1[fp+ -3]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -3], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'assert_eq[op0:='op0[ap+ -2], 'dst[ap] === 'res[op0* 'op1[ap+ -1]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -11], 'dst[ap+ -1] === 'res[op0* 'op1[ap+ -7]]].to_nat,
  'assert_eq[op0:='op0[fp+ -5], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  4,
  'ret[].to_nat,
  'jnz_rel['op1[imm], 'dst[ap];ap++].to_nat,
  12,
  'assert_eq['dst[ap] === 'res['op1[imm]];ap++].to_nat,
  -1,
  'assert_eq[op0:='op0[ap], 'dst[ap+ -1] === 'res[op0+ 'op1[fp+ -3]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[ap] === 'res[op0+ 'op1[ap+ -1]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -10], 'dst[ap+ -1] === 'res[op0+ 'op1[ap+ -6]]].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[ap] === 'res[op0* 'op1[ap+ -2]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -11], 'dst[ap+ -1] === 'res[op0* 'op1[ap+ -7]]].to_nat,
  'assert_eq[op0:='op0[fp+ -5], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  4,
  'ret[].to_nat,
  'assert_eq[op0:='op0[ap+ -7], 'dst[fp+ -3] === 'res[op0+ 'op1[ap+ -3]]].to_nat,
  'assert_eq[op0:='op0[ap], 'dst[fp+ -3] === 'res[op0+ 'op1[fp+ -4]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[ap] === 'res[op0* 'op1[ap+ -1]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -9], 'dst[ap+ -1] === 'res[op0* 'op1[ap+ -5]]].to_nat,
  'ap+=['res['op1[imm]]].to_nat,
  2,
  'assert_eq[op0:='op0[fp+ -5], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  4,
  'ret[].to_nat
]

/- function starkware.cairo.common.math.assert_lt_felt code definition -/

def starkware.cairo.common.math.code_assert_lt_felt : list F := [
  'assert_eq[op0:='op0[ap], 'dst[fp+ -4] === 'res[op0+ 'op1[fp+ -3]];ap++].to_nat,
  'jnz_rel['op1[imm], 'dst[ap+ -1]].to_nat,
  4,
  'assert_eq[op0:='op0[fp+ -4], 'dst[fp+ -4] === 'res[op0+ 'op1[imm]]].to_nat,
  1,
  'assert_eq['dst[ap] === 'res['op1[fp+ -5]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ -4]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ -3]];ap++].to_nat,
  'call_rel['op1[imm]].to_nat,
  -53,
  'ret[].to_nat
]

/- function starkware.cairo.common.squash_dict.squash_dict_inner code definition -/

def code_squash_dict_inner : list F := [
  'ap+=['res['op1[imm]]].to_nat,
  2,
  'assert_eq[op0:='op0[fp+ -9], 'dst[ap] === 'res['op1[op0]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -1], 'dst[ap] === 'res[op0* 'op1[imm]];ap++].to_nat,
  3,
  'assert_eq[op0:='op0[fp+ -8], 'dst[ap+ 1] === 'res[op0+ 'op1[ap+ -1]];ap++].to_nat,
  'assert_eq[op0:='op0[ap], 'dst[ap+ -1] === 'res['op1[op0+ 2]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -9], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'assert_eq[op0:='op0[ap+ -2], 'dst[fp+ -6] === 'res['op1[op0]]].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[fp+ -6] === 'res['op1[op0]]].to_nat,
  'assert_eq[op0:='op0[ap+ -2], 'dst[fp] === 'res['op1[op0+ 1]]].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[fp] === 'res['op1[op0+ 1]]].to_nat,
  'jnz_rel['op1[imm], 'dst[fp+ 1]].to_nat,
  15,
  'assert_eq[op0:='op0[ap+ -1], 'dst[ap] === 'res['op1[op0]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -1], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'assert_eq[op0:='op0[ap+ -1], 'dst[ap] === 'res[op0* 'op1[imm]];ap++].to_nat,
  3,
  'assert_eq[op0:='op0[ap+ -5], 'dst[ap+ 2] === 'res[op0+ 'op1[ap+ -1]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ 1], 'dst[ap+ -7] === 'res['op1[op0+ 1]]].to_nat,
  'assert_eq[op0:='op0[ap+ 1], 'dst[ap] === 'res['op1[op0+ 2]];ap++].to_nat,
  'assert_eq[op0:='op0[ap], 'dst[fp+ -6] === 'res['op1[op0]]].to_nat,
  'assert_eq[op0:='op0[ap+ -6], 'dst[ap+ 1] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'jnz_rel['op1[imm], 'dst[ap+ -3];ap++].to_nat,
  -11,
  'assert_eq[op0:='op0[ap], 'dst[fp+ -7] === 'res[op0+ 'op1[ap+ -2]]].to_nat,
  'assert_eq[op0:='op0[ap+ -1], 'dst[ap] === 'res['op1[op0]];ap++].to_nat,
  'assert_eq[op0:='op0[ap], 'dst[ap+ -2] === 'res[op0+ 'op1[fp+ -9]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[ap+ -5] === 'res['op1[op0+ 2]]].to_nat,
  'assert_eq[op0:='op0[ap], 'dst[fp+ -5] === 'res[op0+ 'op1[ap+ -1]];ap++].to_nat,
  'jnz_rel['op1[imm], 'dst[ap+ -1]].to_nat,
  7,
  'assert_eq[op0:='op0[ap+ -4], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'assert_eq[op0:='op0[fp+ -4], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  3,
  'ret[].to_nat,
  'ap+=['res['op1[imm]]].to_nat,
  1,
  'jnz_rel['op1[imm], 'dst[fp+ -3]].to_nat,
  14,
  'assert_eq[op0:='op0[fp+ -6], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'assert_eq[op0:='op0[ap], 'dst[ap+ -2] === 'res[op0+ 'op1[ap+ -1]];ap++].to_nat,
  'assert_eq[op0:='op0[ap+ -7], 'dst[ap+ -1] === 'res['op1[op0+ 1]]].to_nat,
  'assert_eq[op0:='op0[ap+ -7], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  2,
  'assert_eq['dst[ap] === 'res['op1[fp+ -8]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ -7]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[ap+ -6]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[ap+ -8]];ap++].to_nat,
  'jmp_rel['op1[imm]].to_nat,
  '[#nz 12],
  'assert_eq[op0:='op0[ap+ -5], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'assert_eq['dst[ap] === 'res['op1[fp+ -6]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[ap+ -3]];ap++].to_nat,
  'call_rel['op1[imm]].to_nat,
  -99,
  'assert_eq['dst[ap] === 'res['op1[fp+ -8]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ -7]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[ap+ -29]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[ap+ -31]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  3,
  'assert_eq['dst[ap] === 'res['op1[fp+ -3]];ap++].to_nat,
  'call_rel['op1[imm]].to_nat,
  -69,
  'ret[].to_nat
]

/- function starkware.cairo.common.squash_dict.squash_dict code definition -/

def code_squash_dict : list F := [
  'ap+=['res['op1[imm]]].to_nat,
  3,
  'assert_eq[op0:='op0[fp], 'dst[fp+ -4] === 'res[op0+ 'op1[fp+ -5]]].to_nat,
  'jnz_rel['op1[imm], 'dst[fp]].to_nat,
  5,
  'assert_eq['dst[ap] === 'res['op1[fp+ -6]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ -3]];ap++].to_nat,
  'ret[].to_nat,
  'assert_eq[op0:='op0[fp], 'dst[ap] === 'res[op0* 'op1[imm]];ap++].to_nat,
  1206167596222043737899107594365023368541035738443865566657697352045290673494,
  'jnz_rel['op1[imm], 'dst[fp+ 2]].to_nat,
  7,
  'assert_eq[op0:='op0[fp+ -6], 'dst[fp+ 1] === 'res['op1[op0]]].to_nat,
  'assert_eq[op0:='op0[fp+ -6], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  1,
  'jmp_rel['op1[imm]].to_nat,
  '[#nz 3],
  'assert_eq['dst[ap] === 'res['op1[fp+ -6]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ -5]];ap++].to_nat,
  'assert_eq[op0:='op0[fp+ -4], 'dst[ap] === 'res[op0+ 'op1[imm]];ap++].to_nat,
  -1,
  'assert_eq['dst[ap] === 'res['op1[fp+ 1]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[ap+ -5]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ -3]];ap++].to_nat,
  'assert_eq['dst[ap] === 'res['op1[fp+ 2]];ap++].to_nat,
  'call_rel['op1[imm]].to_nat,
  3,
  'ret[].to_nat
]

