/-
File: ec_ec_mul_by_uint256_soundness.lean

Autogenerated file.
-/
import starkware.cairo.lean.semantics.soundness.hoare
import .ec_code
import ..ec_spec
import .ec_alloc_soundness
import .ec_fast_ec_mul_inner_soundness
import .ec_ec_add_soundness
import .ec_build_ec_mul_table_soundness
open tactic

open starkware.cairo.common.secp256r1.ec
open starkware.cairo.common.math
open starkware.cairo.common.secp256r1.field
open starkware.cairo.common.alloc
open starkware.cairo.common.cairo_secp.bigint3
open starkware.cairo.common.secp256r1.bigint
open starkware.cairo.common.uint256
open starkware.cairo.common.cairo_secp.ec_point

variables {F : Type} [field F] [decidable_eq F] [prelude_hyps F]
variable  mem : F → F
variable  σ : register_state F

/- starkware.cairo.common.secp256r1.ec.ec_mul_by_uint256 autogenerated soundness theorem -/

theorem auto_sound_ec_mul_by_uint256
    -- arguments
    (range_check_ptr : F) (point : EcPoint mem) (scalar : Uint256 mem)
    -- code is in memory at σ.pc
    (h_mem : mem_at mem code_ec_mul_by_uint256 σ.pc)
    -- all dependencies are in memory
    (h_mem_0 : mem_at mem code_alloc (σ.pc  - 707))
    (h_mem_1 : mem_at mem code_assert_nn (σ.pc  - 704))
    (h_mem_2 : mem_at mem code_assert_le (σ.pc  - 700))
    (h_mem_3 : mem_at mem code_assert_nn_le (σ.pc  - 695))
    (h_mem_4 : mem_at mem code_nondet_bigint3 (σ.pc  - 686))
    (h_mem_5 : mem_at mem code_unreduced_mul (σ.pc  - 673))
    (h_mem_6 : mem_at mem code_unreduced_sqr (σ.pc  - 635))
    (h_mem_7 : mem_at mem code_assert_165_bit (σ.pc  - 601))
    (h_mem_8 : mem_at mem code_verify_zero (σ.pc  - 590))
    (h_mem_9 : mem_at mem code_is_zero (σ.pc  - 556))
    (h_mem_12 : mem_at mem code_compute_doubling_slope (σ.pc  - 467))
    (h_mem_13 : mem_at mem code_compute_slope (σ.pc  - 421))
    (h_mem_14 : mem_at mem code_ec_double (σ.pc  - 397))
    (h_mem_15 : mem_at mem code_fast_ec_add (σ.pc  - 324))
    (h_mem_16 : mem_at mem code_ec_add (σ.pc  - 237))
    (h_mem_21 : mem_at mem code_build_ec_mul_table (σ.pc  + 260))
    (h_mem_22 : mem_at mem code_fast_ec_mul_inner (σ.pc  + 483))
    -- input arguments on the stack
    (hin_range_check_ptr : range_check_ptr = mem (σ.fp - 11))
    (hin_point : point = cast_EcPoint mem (σ.fp - 10))
    (hin_scalar : scalar = cast_Uint256 mem (σ.fp - 4))
    -- conclusion
  : ensures_ret mem σ (λ κ τ,
      ∃ μ ≤ κ, rc_ensures mem (rc_bound F) μ (mem (σ.fp - 11)) (mem $ τ.ap - 7)
        (spec_ec_mul_by_uint256 mem κ range_check_ptr point scalar (mem (τ.ap - 7)) (cast_EcPoint  mem (τ.ap - 6)))) :=
begin
  apply ensures_of_ensuresb, intro νbound,
  have h_mem_rec := h_mem,
  unpack_memory code_ec_mul_by_uint256 at h_mem with ⟨hpc0, hpc1, hpc2, hpc3, hpc4, hpc5, hpc6, hpc7, hpc8, hpc9, hpc10, hpc11, hpc12, hpc13, hpc14, hpc15, hpc16, hpc17, hpc18, hpc19, hpc20, hpc21, hpc22, hpc23, hpc24, hpc25, hpc26, hpc27, hpc28, hpc29, hpc30, hpc31, hpc32, hpc33, hpc34, hpc35, hpc36, hpc37, hpc38, hpc39, hpc40, hpc41, hpc42, hpc43, hpc44, hpc45, hpc46, hpc47, hpc48, hpc49, hpc50, hpc51, hpc52, hpc53, hpc54, hpc55, hpc56, hpc57, hpc58, hpc59, hpc60, hpc61, hpc62, hpc63, hpc64, hpc65, hpc66, hpc67, hpc68, hpc69, hpc70, hpc71, hpc72, hpc73, hpc74, hpc75, hpc76, hpc77, hpc78, hpc79, hpc80, hpc81, hpc82, hpc83, hpc84, hpc85, hpc86, hpc87, hpc88, hpc89, hpc90, hpc91, hpc92, hpc93, hpc94, hpc95, hpc96, hpc97, hpc98, hpc99, hpc100, hpc101, hpc102, hpc103, hpc104, hpc105, hpc106, hpc107, hpc108, hpc109, hpc110, hpc111, hpc112, hpc113, hpc114, hpc115, hpc116, hpc117, hpc118, hpc119, hpc120, hpc121, hpc122, hpc123, hpc124, hpc125, hpc126, hpc127, hpc128, hpc129, hpc130, hpc131, hpc132, hpc133, hpc134, hpc135, hpc136, hpc137, hpc138, hpc139, hpc140, hpc141, hpc142, hpc143⟩,
  -- ap += 3
  step_advance_ap hpc0 hpc1,
  -- function call
  step_sub hpc2 (auto_sound_alloc mem _  _),
  { rw hpc3, norm_num2, exact h_mem_0 },
  intros κ_call4 ap4 h_call4,
  rcases h_call4 with ⟨h_call4_ap_offset, h_call4⟩,
  mkdef htv_table : table = (cast_π_EcPoint mem (mem (ap4 - 1))),
  rw [eq_EcPoint_π_ptr_cast] at htv_table,
  simp only [←htv_table] at h_call4,
  clear ,
  -- local var
  step_assert_eq hpc4 with temp0,
  have lc_table: table = (cast_π_EcPoint mem (mem (σ.fp))), {
    try { ext } ; {
      try { simp only [htv_table] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_π_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [temp0] },
      try { simp only [h_call4_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  clear temp0,
  -- function call
  step_assert_eq hpc5 with arg0,
  step_assert_eq hpc6 with arg1,
  step_assert_eq hpc7 with arg2,
  step_assert_eq hpc8 with arg3,
  step_assert_eq hpc9 with arg4,
  step_assert_eq hpc10 with arg5,
  step_assert_eq hpc11 with arg6,
  step_assert_eq hpc12 with arg7,
  step_sub hpc13 (auto_sound_build_ec_mul_table mem _ range_check_ptr point table _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc14, norm_num2, exact h_mem_21 },
  { rw hpc14, norm_num2, exact h_mem_4 },
  { rw hpc14, norm_num2, exact h_mem_5 },
  { rw hpc14, norm_num2, exact h_mem_6 },
  { rw hpc14, norm_num2, exact h_mem_7 },
  { rw hpc14, norm_num2, exact h_mem_8 },
  { rw hpc14, norm_num2, exact h_mem_12 },
  { rw hpc14, norm_num2, exact h_mem_13 },
  { rw hpc14, norm_num2, exact h_mem_14 },
  { rw hpc14, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7] },
    try { simp only [h_call4_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7] },
      try { simp only [h_call4_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7] },
      try { simp only [h_call4_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call15 ap15 h_call15,
  rcases h_call15 with ⟨rc_m15, rc_mle15, hl_range_check_ptr₁, h_call15⟩,
  mkdef htv_range_check_ptr₁ : range_check_ptr₁ = (mem (ap15 - 1)),
  simp only [←htv_range_check_ptr₁] at h_call15,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7] at hl_range_check_ptr₁ },
  try { rw [h_call4_ap_offset] at hl_range_check_ptr₁ }, try { arith_simps at hl_range_check_ptr₁ },
  try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₁ }, try { rw [←hin_range_check_ptr] at hl_range_check_ptr₁ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7] at h_call15 },
  try { rw [h_call4_ap_offset] at h_call15 }, try { arith_simps at h_call15 },
  rw [hin_range_check_ptr] at h_call15,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7,
  -- local var
  mkdef lc_first_nibble : first_nibble = (mem (σ.fp + 1)),
  -- local var
  mkdef lc_last_nibble : last_nibble = (mem (σ.fp + 2)),
  -- function call
  step_assert_eq hpc15 with arg0,
  step_assert_eq hpc16 hpc17 with arg1,
  step_sub hpc18 (auto_sound_assert_nn_le mem _ range_check_ptr₁ first_nibble 15 _ _ _ _ _ _),
  { rw hpc19, norm_num2, exact h_mem_3 },
  { rw hpc19, norm_num2, exact h_mem_1 },
  { rw hpc19, norm_num2, exact h_mem_2 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1] },
    try { simp only [h_call4_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1] },
    try { simp only [h_call4_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1] },
    try { simp only [h_call4_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call20 ap20 h_call20,
  rcases h_call20 with ⟨h_call20_ap_offset, h_call20⟩,
  rcases h_call20 with ⟨rc_m20, rc_mle20, hl_range_check_ptr₂, h_call20⟩,
  mkdef htv_range_check_ptr₂ : range_check_ptr₂ = (mem (ap20 - 1)),
  simp only [←htv_range_check_ptr₂] at h_call20,
  try { simp only [arg0 ,arg1] at hl_range_check_ptr₂ },
  try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₂ }, try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₂ },
  try { simp only [arg0 ,arg1] at h_call20 },
  rw [←htv_range_check_ptr₁, hl_range_check_ptr₁, hin_range_check_ptr] at h_call20,
  clear arg0 arg1,
  -- function call
  step_assert_eq hpc20 hpc21 with arg0,
  step_assert_eq hpc22 with arg1,
  step_assert_eq hpc23 hpc24 with arg2,
  step_assert_eq hpc25 hpc26 with arg3,
  step_assert_eq hpc27 with arg4,
  step_assert_eq hpc28 hpc29 with arg5,
  step_assert_eq hpc30 hpc31 with arg6,
  step_assert_eq hpc32 with arg7,
  step_assert_eq hpc33 hpc34 with arg8,
  step_assert_eq hpc35 hpc36 with arg9,
  step_assert_eq hpc37 with arg10,
  step_assert_eq hpc38 hpc39 with arg11,
  step_assert_eq hpc40 hpc41 with arg12,
  step_assert_eq hpc42 with arg13,
  step_assert_eq hpc43 hpc44 with arg14,
  step_assert_eq hpc45 hpc46 with arg15,
  step_assert_eq hpc47 with arg16,
  step_assert_eq hpc48 with arg17,
  step_assert_eq hpc49 with arg18,
  step_assert_eq hpc50 with arg19,
  step_assert_eq hpc51 with arg20,
  step_assert_eq hpc52 with arg21,
  step_assert_eq hpc53 with arg22,
  step_assert_eq hpc54 with arg23,
  step_assert_eq hpc55 with arg24,
  step_assert_eq hpc56 with arg25,
  step_assert_eq hpc57 hpc58 with arg26,
  step_sub hpc59 (auto_sound_fast_ec_mul_inner mem _ range_check_ptr₂ table (cast_EcPoint mem (table.σ_ptr + first_nibble * 6)) first_nibble 124 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc60, norm_num2, exact h_mem_22 },
  { rw hpc60, norm_num2, exact h_mem_1 },
  { rw hpc60, norm_num2, exact h_mem_2 },
  { rw hpc60, norm_num2, exact h_mem_3 },
  { rw hpc60, norm_num2, exact h_mem_4 },
  { rw hpc60, norm_num2, exact h_mem_5 },
  { rw hpc60, norm_num2, exact h_mem_6 },
  { rw hpc60, norm_num2, exact h_mem_7 },
  { rw hpc60, norm_num2, exact h_mem_8 },
  { rw hpc60, norm_num2, exact h_mem_12 },
  { rw hpc60, norm_num2, exact h_mem_13 },
  { rw hpc60, norm_num2, exact h_mem_14 },
  { rw hpc60, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call61 ap61 h_call61,
  rcases h_call61 with ⟨rc_m61, rc_mle61, hl_range_check_ptr₃, h_call61⟩,
  mkdef htv_range_check_ptr₃ : range_check_ptr₃ = (mem (ap61 - 8)),
  simp only [←htv_range_check_ptr₃] at h_call61,
  mkdef htv_res : res = (cast_EcPoint mem (ap61 - 7)),
  simp only [←htv_res] at h_call61,
  mkdef htv_scalar_high : scalar_high = (mem (ap61 - 1)),
  simp only [←htv_scalar_high] at h_call61,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15 ,arg16 ,arg17 ,arg18 ,arg19 ,arg20 ,arg21 ,arg22 ,arg23 ,arg24 ,arg25 ,arg26] at hl_range_check_ptr₃ },
  try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₃ }, try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₃ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15 ,arg16 ,arg17 ,arg18 ,arg19 ,arg20 ,arg21 ,arg22 ,arg23 ,arg24 ,arg25 ,arg26] at h_call61 },
  rw [←htv_range_check_ptr₂, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call61,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26,
  -- compound assert eq
  step_assert_eq hpc61 with temp0,
  have a61: scalar_high = scalar.high, {
    apply assert_eq_reduction temp0,
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
  },
  try { dsimp at a61 }, try { arith_simps at a61 },
  clear temp0,
  -- function call
  step_assert_eq hpc62 with arg0,
  step_assert_eq hpc63 with arg1,
  step_assert_eq hpc64 with arg2,
  step_assert_eq hpc65 with arg3,
  step_assert_eq hpc66 with arg4,
  step_assert_eq hpc67 with arg5,
  step_assert_eq hpc68 with arg6,
  step_assert_eq hpc69 with arg7,
  step_assert_eq hpc70 hpc71 with arg8,
  step_assert_eq hpc72 hpc73 with arg9,
  step_sub hpc74 (auto_sound_fast_ec_mul_inner mem _ range_check_ptr₃ table res 0 124 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc75, norm_num2, exact h_mem_22 },
  { rw hpc75, norm_num2, exact h_mem_1 },
  { rw hpc75, norm_num2, exact h_mem_2 },
  { rw hpc75, norm_num2, exact h_mem_3 },
  { rw hpc75, norm_num2, exact h_mem_4 },
  { rw hpc75, norm_num2, exact h_mem_5 },
  { rw hpc75, norm_num2, exact h_mem_6 },
  { rw hpc75, norm_num2, exact h_mem_7 },
  { rw hpc75, norm_num2, exact h_mem_8 },
  { rw hpc75, norm_num2, exact h_mem_12 },
  { rw hpc75, norm_num2, exact h_mem_13 },
  { rw hpc75, norm_num2, exact h_mem_14 },
  { rw hpc75, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call76 ap76 h_call76,
  rcases h_call76 with ⟨rc_m76, rc_mle76, hl_range_check_ptr₄, h_call76⟩,
  mkdef htv_range_check_ptr₄ : range_check_ptr₄ = (mem (ap76 - 8)),
  simp only [←htv_range_check_ptr₄] at h_call76,
  mkdef htv_res₁ : res₁ = (cast_EcPoint mem (ap76 - 7)),
  simp only [←htv_res₁] at h_call76,
  mkdef htv_scalar_low : scalar_low = (mem (ap76 - 1)),
  simp only [←htv_scalar_low] at h_call76,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9] at hl_range_check_ptr₄ },
  try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₄ }, try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₄ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9] at h_call76 },
  rw [←htv_range_check_ptr₃, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call76,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9,
  -- compound assert eq
  step_assert_eq hpc76 hpc77 with temp0,
  step_assert_eq hpc78 with temp1,
  step_assert_eq hpc79 with temp2,
  have a76: scalar.low = 16 * scalar_low + last_nibble, {
    apply assert_eq_reduction temp2,
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0, temp1] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
  },
  try { dsimp at a76 }, try { arith_simps at a76 },
  clear temp0 temp1 temp2,
  -- function call
  step_assert_eq hpc80 with arg0,
  step_assert_eq hpc81 with arg1,
  step_assert_eq hpc82 hpc83 with arg2,
  step_sub hpc84 (auto_sound_assert_nn_le mem _ range_check_ptr₄ last_nibble 15 _ _ _ _ _ _),
  { rw hpc85, norm_num2, exact h_mem_3 },
  { rw hpc85, norm_num2, exact h_mem_1 },
  { rw hpc85, norm_num2, exact h_mem_2 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call86 ap86 h_call86,
  rcases h_call86 with ⟨h_call86_ap_offset, h_call86⟩,
  rcases h_call86 with ⟨rc_m86, rc_mle86, hl_range_check_ptr₅, h_call86⟩,
  mkdef htv_range_check_ptr₅ : range_check_ptr₅ = (mem (ap86 - 1)),
  simp only [←htv_range_check_ptr₅] at h_call86,
  try { simp only [arg0 ,arg1 ,arg2] at hl_range_check_ptr₅ },
  try { rw [←htv_range_check_ptr₅] at hl_range_check_ptr₅ }, try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₅ },
  try { simp only [arg0 ,arg1 ,arg2] at h_call86 },
  rw [←htv_range_check_ptr₄, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call86,
  clear arg0 arg1 arg2,
  -- function call
  step_assert_eq hpc86 with arg0,
  step_assert_eq hpc87 with arg1,
  step_assert_eq hpc88 with arg2,
  step_assert_eq hpc89 with arg3,
  step_assert_eq hpc90 with arg4,
  step_assert_eq hpc91 with arg5,
  step_sub hpc92 (auto_sound_ec_double mem _ range_check_ptr₅ res₁ _ _ _ _ _ _ _ _ _),
  { rw hpc93, norm_num2, exact h_mem_14 },
  { rw hpc93, norm_num2, exact h_mem_4 },
  { rw hpc93, norm_num2, exact h_mem_5 },
  { rw hpc93, norm_num2, exact h_mem_6 },
  { rw hpc93, norm_num2, exact h_mem_7 },
  { rw hpc93, norm_num2, exact h_mem_8 },
  { rw hpc93, norm_num2, exact h_mem_12 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call94 ap94 h_call94,
  rcases h_call94 with ⟨rc_m94, rc_mle94, hl_range_check_ptr₆, h_call94⟩,
  mkdef htv_range_check_ptr₆ : range_check_ptr₆ = (mem (ap94 - 7)),
  simp only [←htv_range_check_ptr₆] at h_call94,
  mkdef htv_res₂ : res₂ = (cast_EcPoint mem (ap94 - 6)),
  simp only [←htv_res₂] at h_call94,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₆ },
  try { rw [←htv_range_check_ptr₆] at hl_range_check_ptr₆ }, try { rw [←htv_range_check_ptr₅] at hl_range_check_ptr₆ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call94 },
  rw [←htv_range_check_ptr₅, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call94,
  clear arg0 arg1 arg2 arg3 arg4 arg5,
  -- function call
  step_sub hpc94 (auto_sound_ec_double mem _ range_check_ptr₆ res₂ _ _ _ _ _ _ _ _ _),
  { rw hpc95, norm_num2, exact h_mem_14 },
  { rw hpc95, norm_num2, exact h_mem_4 },
  { rw hpc95, norm_num2, exact h_mem_5 },
  { rw hpc95, norm_num2, exact h_mem_6 },
  { rw hpc95, norm_num2, exact h_mem_7 },
  { rw hpc95, norm_num2, exact h_mem_8 },
  { rw hpc95, norm_num2, exact h_mem_12 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call96 ap96 h_call96,
  rcases h_call96 with ⟨rc_m96, rc_mle96, hl_range_check_ptr₇, h_call96⟩,
  mkdef htv_range_check_ptr₇ : range_check_ptr₇ = (mem (ap96 - 7)),
  simp only [←htv_range_check_ptr₇] at h_call96,
  mkdef htv_res₃ : res₃ = (cast_EcPoint mem (ap96 - 6)),
  simp only [←htv_res₃] at h_call96,
  try { rw [←htv_range_check_ptr₇] at hl_range_check_ptr₇ }, try { rw [←htv_range_check_ptr₆] at hl_range_check_ptr₇ },
  rw [←htv_range_check_ptr₆, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call96,
  clear ,
  -- function call
  step_sub hpc96 (auto_sound_ec_double mem _ range_check_ptr₇ res₃ _ _ _ _ _ _ _ _ _),
  { rw hpc97, norm_num2, exact h_mem_14 },
  { rw hpc97, norm_num2, exact h_mem_4 },
  { rw hpc97, norm_num2, exact h_mem_5 },
  { rw hpc97, norm_num2, exact h_mem_6 },
  { rw hpc97, norm_num2, exact h_mem_7 },
  { rw hpc97, norm_num2, exact h_mem_8 },
  { rw hpc97, norm_num2, exact h_mem_12 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂, htv_range_check_ptr₇, htv_res₃] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂, htv_range_check_ptr₇, htv_res₃] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call98 ap98 h_call98,
  rcases h_call98 with ⟨rc_m98, rc_mle98, hl_range_check_ptr₈, h_call98⟩,
  mkdef htv_range_check_ptr₈ : range_check_ptr₈ = (mem (ap98 - 7)),
  simp only [←htv_range_check_ptr₈] at h_call98,
  mkdef htv_res₄ : res₄ = (cast_EcPoint mem (ap98 - 6)),
  simp only [←htv_res₄] at h_call98,
  try { rw [←htv_range_check_ptr₈] at hl_range_check_ptr₈ }, try { rw [←htv_range_check_ptr₇] at hl_range_check_ptr₈ },
  rw [←htv_range_check_ptr₇, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call98,
  clear ,
  -- function call
  step_sub hpc98 (auto_sound_ec_double mem _ range_check_ptr₈ res₄ _ _ _ _ _ _ _ _ _),
  { rw hpc99, norm_num2, exact h_mem_14 },
  { rw hpc99, norm_num2, exact h_mem_4 },
  { rw hpc99, norm_num2, exact h_mem_5 },
  { rw hpc99, norm_num2, exact h_mem_6 },
  { rw hpc99, norm_num2, exact h_mem_7 },
  { rw hpc99, norm_num2, exact h_mem_8 },
  { rw hpc99, norm_num2, exact h_mem_12 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂, htv_range_check_ptr₇, htv_res₃, htv_range_check_ptr₈, htv_res₄] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂, htv_range_check_ptr₇, htv_res₃, htv_range_check_ptr₈, htv_res₄] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call100 ap100 h_call100,
  rcases h_call100 with ⟨rc_m100, rc_mle100, hl_range_check_ptr₉, h_call100⟩,
  mkdef htv_range_check_ptr₉ : range_check_ptr₉ = (mem (ap100 - 7)),
  simp only [←htv_range_check_ptr₉] at h_call100,
  mkdef htv_res₅ : res₅ = (cast_EcPoint mem (ap100 - 6)),
  simp only [←htv_res₅] at h_call100,
  try { rw [←htv_range_check_ptr₉] at hl_range_check_ptr₉ }, try { rw [←htv_range_check_ptr₈] at hl_range_check_ptr₉ },
  rw [←htv_range_check_ptr₈, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call100,
  clear ,
  -- tail function call
  step_assert_eq hpc100 hpc101 with arg0,
  step_assert_eq hpc102 with arg1,
  step_assert_eq hpc103 hpc104 with arg2,
  step_assert_eq hpc105 hpc106 with arg3,
  step_assert_eq hpc107 with arg4,
  step_assert_eq hpc108 hpc109 with arg5,
  step_assert_eq hpc110 hpc111 with arg6,
  step_assert_eq hpc112 with arg7,
  step_assert_eq hpc113 hpc114 with arg8,
  step_assert_eq hpc115 hpc116 with arg9,
  step_assert_eq hpc117 with arg10,
  step_assert_eq hpc118 hpc119 with arg11,
  step_assert_eq hpc120 hpc121 with arg12,
  step_assert_eq hpc122 with arg13,
  step_assert_eq hpc123 hpc124 with arg14,
  step_assert_eq hpc125 hpc126 with arg15,
  step_assert_eq hpc127 with arg16,
  step_assert_eq hpc128 with arg17,
  step_assert_eq hpc129 with arg18,
  step_assert_eq hpc130 with arg19,
  step_assert_eq hpc131 with arg20,
  step_assert_eq hpc132 with arg21,
  step_assert_eq hpc133 with arg22,
  step_assert_eq hpc134 with arg23,
  step_assert_eq hpc135 with arg24,
  step_assert_eq hpc136 with arg25,
  step_assert_eq hpc137 with arg26,
  step_assert_eq hpc138 with arg27,
  step_assert_eq hpc139 with arg28,
  step_assert_eq hpc140 with arg29,
  step_sub hpc141 (auto_sound_ec_add mem _ range_check_ptr₉ res₅ (cast_EcPoint mem (table.σ_ptr + last_nibble * 6)) _ _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc142, norm_num2, exact h_mem_16 },
  { rw hpc142, norm_num2, exact h_mem_4 },
  { rw hpc142, norm_num2, exact h_mem_5 },
  { rw hpc142, norm_num2, exact h_mem_6 },
  { rw hpc142, norm_num2, exact h_mem_7 },
  { rw hpc142, norm_num2, exact h_mem_8 },
  { rw hpc142, norm_num2, exact h_mem_9 },
  { rw hpc142, norm_num2, exact h_mem_12 },
  { rw hpc142, norm_num2, exact h_mem_13 },
  { rw hpc142, norm_num2, exact h_mem_14 },
  { rw hpc142, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂, htv_range_check_ptr₇, htv_res₃, htv_range_check_ptr₈, htv_res₄, htv_range_check_ptr₉, htv_res₅] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29] },
    try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂, htv_range_check_ptr₇, htv_res₃, htv_range_check_ptr₈, htv_res₄, htv_range_check_ptr₉, htv_res₅] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_table, lc_table, htv_range_check_ptr₁, lc_first_nibble, lc_last_nibble, htv_range_check_ptr₂, htv_range_check_ptr₃, htv_res, htv_scalar_high, htv_range_check_ptr₄, htv_res₁, htv_scalar_low, htv_range_check_ptr₅, htv_range_check_ptr₆, htv_res₂, htv_range_check_ptr₇, htv_res₃, htv_range_check_ptr₈, htv_res₄, htv_range_check_ptr₉, htv_res₅] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_Uint256, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29] },
      try { simp only [h_call4_ap_offset, h_call20_ap_offset, h_call86_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call143 ap143 h_call143,
  rcases h_call143 with ⟨rc_m143, rc_mle143, hl_range_check_ptr₁₀, h_call143⟩,
  step_ret hpc143,
  mkdef htv_range_check_ptr₁₀ : range_check_ptr₁₀ = (mem (ap143 - 7)),
  simp only [←htv_range_check_ptr₁₀] at h_call143,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15 ,arg16 ,arg17 ,arg18 ,arg19 ,arg20 ,arg21 ,arg22 ,arg23 ,arg24 ,arg25 ,arg26 ,arg27 ,arg28 ,arg29] at hl_range_check_ptr₁₀ },
  try { rw [←htv_range_check_ptr₁₀] at hl_range_check_ptr₁₀ }, try { rw [←htv_range_check_ptr₉] at hl_range_check_ptr₁₀ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15 ,arg16 ,arg17 ,arg18 ,arg19 ,arg20 ,arg21 ,arg22 ,arg23 ,arg24 ,arg25 ,arg26 ,arg27 ,arg28 ,arg29] at h_call143 },
  rw [←htv_range_check_ptr₉, hl_range_check_ptr₉, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call143,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29,
  -- finish
  step_done, use_only [rfl, rfl],
  -- range check condition
  use_only (rc_m15+rc_m20+rc_m61+rc_m76+rc_m86+rc_m94+rc_m96+rc_m98+rc_m100+rc_m143+0+0), split,
  linarith [rc_mle15, rc_mle20, rc_mle61, rc_mle76, rc_mle86, rc_mle94, rc_mle96, rc_mle98, rc_mle100, rc_mle143],
  split,
  { try { norm_num1 }, arith_simps,
    try { rw [←htv_range_check_ptr₁₀] }, try { rw [hl_range_check_ptr₁₀] }, try { rw [←htv_range_check_ptr₉] }, try { rw [hl_range_check_ptr₉] }, try { rw [←htv_range_check_ptr₈] }, try { rw [hl_range_check_ptr₈] }, try { rw [←htv_range_check_ptr₇] }, try { rw [hl_range_check_ptr₇] }, try { rw [←htv_range_check_ptr₆] }, try { rw [hl_range_check_ptr₆] }, try { rw [←htv_range_check_ptr₅] }, try { rw [hl_range_check_ptr₅] }, try { rw [←htv_range_check_ptr₄] }, try { rw [hl_range_check_ptr₄] }, try { rw [←htv_range_check_ptr₃] }, try { rw [hl_range_check_ptr₃] }, try { rw [←htv_range_check_ptr₂] }, try { rw [hl_range_check_ptr₂] }, try { rw [←htv_range_check_ptr₁] }, try { rw [hl_range_check_ptr₁] }, try { rw [hin_range_check_ptr] },
    try { ring_nf }, try { arith_simps, refl <|> norm_cast }, try { refl } },
  intro rc_h_range_check_ptr, repeat { rw [add_assoc] at rc_h_range_check_ptr },
  have rc_h_range_check_ptr' := range_checked_add_right rc_h_range_check_ptr,
  -- Final Proof
  -- user-provided reduction
  suffices auto_spec: auto_spec_ec_mul_by_uint256 mem _ range_check_ptr point scalar _ _,
  { apply sound_ec_mul_by_uint256, apply auto_spec },
  -- prove the auto generated assertion
  dsimp [auto_spec_ec_mul_by_uint256],
  try { norm_num1 }, try { arith_simps },
  use_only [κ_call4],
  use_only [table],
  try { dsimp at h_call4, arith_simps at h_call4 },
  try { use_only [h_call4] },
  use_only [κ_call15],
  use_only [range_check_ptr₁],
  have rc_h_range_check_ptr₁ := range_checked_offset' rc_h_range_check_ptr,
  have rc_h_range_check_ptr₁' := range_checked_add_right rc_h_range_check_ptr₁, try { norm_cast at rc_h_range_check_ptr₁' },
  have spec15 := h_call15 rc_h_range_check_ptr',
    try { rw [←hin_range_check_ptr] at spec15 }, try { rw [←htv_range_check_ptr₁] at spec15 },
  try { dsimp at spec15, arith_simps at spec15 },
  use_only [spec15],
  use_only [first_nibble],
  use_only [last_nibble],
  use_only [κ_call20],
  use_only [range_check_ptr₂],
  have rc_h_range_check_ptr₂ := range_checked_offset' rc_h_range_check_ptr₁,
  have rc_h_range_check_ptr₂' := range_checked_add_right rc_h_range_check_ptr₂, try { norm_cast at rc_h_range_check_ptr₂' },
  have spec20 := h_call20 rc_h_range_check_ptr₁',
    try { rw [←hin_range_check_ptr] at spec20 }, try { rw [←hl_range_check_ptr₁] at spec20 }, try { rw [←htv_range_check_ptr₂] at spec20 },
  try { dsimp at spec20, arith_simps at spec20 },
  use_only [spec20],
  use_only [κ_call61],
  use_only [range_check_ptr₃],
  use_only [res],
  use_only [scalar_high],
  have rc_h_range_check_ptr₃ := range_checked_offset' rc_h_range_check_ptr₂,
  have rc_h_range_check_ptr₃' := range_checked_add_right rc_h_range_check_ptr₃, try { norm_cast at rc_h_range_check_ptr₃' },
  have spec61 := h_call61 rc_h_range_check_ptr₂',
    try { rw [←hin_range_check_ptr] at spec61 }, try { rw [←hl_range_check_ptr₁] at spec61 }, try { rw [←hl_range_check_ptr₂] at spec61 }, try { rw [←htv_range_check_ptr₃] at spec61 },
  try { dsimp at spec61, arith_simps at spec61 },
  use_only [spec61],
  use_only [a61],
  use_only [κ_call76],
  use_only [range_check_ptr₄],
  use_only [res₁],
  use_only [scalar_low],
  have rc_h_range_check_ptr₄ := range_checked_offset' rc_h_range_check_ptr₃,
  have rc_h_range_check_ptr₄' := range_checked_add_right rc_h_range_check_ptr₄, try { norm_cast at rc_h_range_check_ptr₄' },
  have spec76 := h_call76 rc_h_range_check_ptr₃',
    try { rw [←hin_range_check_ptr] at spec76 }, try { rw [←hl_range_check_ptr₁] at spec76 }, try { rw [←hl_range_check_ptr₂] at spec76 }, try { rw [←hl_range_check_ptr₃] at spec76 }, try { rw [←htv_range_check_ptr₄] at spec76 },
  try { dsimp at spec76, arith_simps at spec76 },
  use_only [spec76],
  use_only [a76],
  use_only [κ_call86],
  use_only [range_check_ptr₅],
  have rc_h_range_check_ptr₅ := range_checked_offset' rc_h_range_check_ptr₄,
  have rc_h_range_check_ptr₅' := range_checked_add_right rc_h_range_check_ptr₅, try { norm_cast at rc_h_range_check_ptr₅' },
  have spec86 := h_call86 rc_h_range_check_ptr₄',
    try { rw [←hin_range_check_ptr] at spec86 }, try { rw [←hl_range_check_ptr₁] at spec86 }, try { rw [←hl_range_check_ptr₂] at spec86 }, try { rw [←hl_range_check_ptr₃] at spec86 }, try { rw [←hl_range_check_ptr₄] at spec86 }, try { rw [←htv_range_check_ptr₅] at spec86 },
  try { dsimp at spec86, arith_simps at spec86 },
  use_only [spec86],
  use_only [κ_call94],
  use_only [range_check_ptr₆],
  use_only [res₂],
  have rc_h_range_check_ptr₆ := range_checked_offset' rc_h_range_check_ptr₅,
  have rc_h_range_check_ptr₆' := range_checked_add_right rc_h_range_check_ptr₆, try { norm_cast at rc_h_range_check_ptr₆' },
  have spec94 := h_call94 rc_h_range_check_ptr₅',
    try { rw [←hin_range_check_ptr] at spec94 }, try { rw [←hl_range_check_ptr₁] at spec94 }, try { rw [←hl_range_check_ptr₂] at spec94 }, try { rw [←hl_range_check_ptr₃] at spec94 }, try { rw [←hl_range_check_ptr₄] at spec94 }, try { rw [←hl_range_check_ptr₅] at spec94 }, try { rw [←htv_range_check_ptr₆] at spec94 },
  try { dsimp at spec94, arith_simps at spec94 },
  use_only [spec94],
  use_only [κ_call96],
  use_only [range_check_ptr₇],
  use_only [res₃],
  have rc_h_range_check_ptr₇ := range_checked_offset' rc_h_range_check_ptr₆,
  have rc_h_range_check_ptr₇' := range_checked_add_right rc_h_range_check_ptr₇, try { norm_cast at rc_h_range_check_ptr₇' },
  have spec96 := h_call96 rc_h_range_check_ptr₆',
    try { rw [←hin_range_check_ptr] at spec96 }, try { rw [←hl_range_check_ptr₁] at spec96 }, try { rw [←hl_range_check_ptr₂] at spec96 }, try { rw [←hl_range_check_ptr₃] at spec96 }, try { rw [←hl_range_check_ptr₄] at spec96 }, try { rw [←hl_range_check_ptr₅] at spec96 }, try { rw [←hl_range_check_ptr₆] at spec96 }, try { rw [←htv_range_check_ptr₇] at spec96 },
  try { dsimp at spec96, arith_simps at spec96 },
  use_only [spec96],
  use_only [κ_call98],
  use_only [range_check_ptr₈],
  use_only [res₄],
  have rc_h_range_check_ptr₈ := range_checked_offset' rc_h_range_check_ptr₇,
  have rc_h_range_check_ptr₈' := range_checked_add_right rc_h_range_check_ptr₈, try { norm_cast at rc_h_range_check_ptr₈' },
  have spec98 := h_call98 rc_h_range_check_ptr₇',
    try { rw [←hin_range_check_ptr] at spec98 }, try { rw [←hl_range_check_ptr₁] at spec98 }, try { rw [←hl_range_check_ptr₂] at spec98 }, try { rw [←hl_range_check_ptr₃] at spec98 }, try { rw [←hl_range_check_ptr₄] at spec98 }, try { rw [←hl_range_check_ptr₅] at spec98 }, try { rw [←hl_range_check_ptr₆] at spec98 }, try { rw [←hl_range_check_ptr₇] at spec98 }, try { rw [←htv_range_check_ptr₈] at spec98 },
  try { dsimp at spec98, arith_simps at spec98 },
  use_only [spec98],
  use_only [κ_call100],
  use_only [range_check_ptr₉],
  use_only [res₅],
  have rc_h_range_check_ptr₉ := range_checked_offset' rc_h_range_check_ptr₈,
  have rc_h_range_check_ptr₉' := range_checked_add_right rc_h_range_check_ptr₉, try { norm_cast at rc_h_range_check_ptr₉' },
  have spec100 := h_call100 rc_h_range_check_ptr₈',
    try { rw [←hin_range_check_ptr] at spec100 }, try { rw [←hl_range_check_ptr₁] at spec100 }, try { rw [←hl_range_check_ptr₂] at spec100 }, try { rw [←hl_range_check_ptr₃] at spec100 }, try { rw [←hl_range_check_ptr₄] at spec100 }, try { rw [←hl_range_check_ptr₅] at spec100 }, try { rw [←hl_range_check_ptr₆] at spec100 }, try { rw [←hl_range_check_ptr₇] at spec100 }, try { rw [←hl_range_check_ptr₈] at spec100 }, try { rw [←htv_range_check_ptr₉] at spec100 },
  try { dsimp at spec100, arith_simps at spec100 },
  use_only [spec100],
  use_only [κ_call143],
  have rc_h_range_check_ptr₁₀ := range_checked_offset' rc_h_range_check_ptr₉,
  have rc_h_range_check_ptr₁₀' := range_checked_add_right rc_h_range_check_ptr₁₀, try { norm_cast at rc_h_range_check_ptr₁₀' },
  have spec143 := h_call143 rc_h_range_check_ptr₉',
    try { rw [←hin_range_check_ptr] at spec143 }, try { rw [←hl_range_check_ptr₁] at spec143 }, try { rw [←hl_range_check_ptr₂] at spec143 }, try { rw [←hl_range_check_ptr₃] at spec143 }, try { rw [←hl_range_check_ptr₄] at spec143 }, try { rw [←hl_range_check_ptr₅] at spec143 }, try { rw [←hl_range_check_ptr₆] at spec143 }, try { rw [←hl_range_check_ptr₇] at spec143 }, try { rw [←hl_range_check_ptr₈] at spec143 }, try { rw [←hl_range_check_ptr₉] at spec143 },
  try { dsimp at spec143, arith_simps at spec143 },
  use_only [spec143],
  try { linarith },
end

