/-
File: signature_recover_public_key_ec_mul_soundness.lean

Autogenerated file.
-/
import starkware.cairo.lean.semantics.soundness.hoare
import .signature_recover_public_key_code
import ..signature_recover_public_key_spec
import .signature_recover_public_key_ec_add_soundness
import .signature_recover_public_key_ec_mul_inner_soundness
open tactic

open starkware.cairo.common.cairo_secp.ec
open starkware.cairo.common.cairo_secp.bigint
open starkware.cairo.common.cairo_secp.bigint3
open starkware.cairo.common.cairo_secp.field
open starkware.cairo.common.cairo_secp.ec_point

variables {F : Type} [field F] [decidable_eq F] [prelude_hyps F]
variable  mem : F → F
variable  σ : register_state F

/- starkware.cairo.common.cairo_secp.ec.ec_mul autogenerated soundness theorem -/

theorem auto_sound_ec_mul
    -- arguments
    (range_check_ptr : F) (point : EcPoint mem) (scalar : BigInt3 mem)
    -- code is in memory at σ.pc
    (h_mem : mem_at mem code_ec_mul σ.pc)
    -- all dependencies are in memory
    (h_mem_4 : mem_at mem code_nondet_bigint3 (σ.pc  - 561))
    (h_mem_5 : mem_at mem code_unreduced_mul (σ.pc  - 549))
    (h_mem_6 : mem_at mem code_unreduced_sqr (σ.pc  - 529))
    (h_mem_7 : mem_at mem code_verify_zero (σ.pc  - 513))
    (h_mem_8 : mem_at mem code_is_zero (σ.pc  - 490))
    (h_mem_12 : mem_at mem code_compute_doubling_slope (σ.pc  - 385))
    (h_mem_13 : mem_at mem code_compute_slope (σ.pc  - 341))
    (h_mem_14 : mem_at mem code_ec_double (σ.pc  - 317))
    (h_mem_15 : mem_at mem code_fast_ec_add (σ.pc  - 244))
    (h_mem_16 : mem_at mem code_ec_add (σ.pc  - 157))
    (h_mem_17 : mem_at mem code_ec_mul_inner (σ.pc  - 101))
    -- input arguments on the stack
    (hin_range_check_ptr : range_check_ptr = mem (σ.fp - 12))
    (hin_point : point = cast_EcPoint mem (σ.fp - 11))
    (hin_scalar : scalar = cast_BigInt3 mem (σ.fp - 5))
    -- conclusion
  : ensures_ret mem σ (λ κ τ,
      ∃ μ ≤ κ, rc_ensures mem (rc_bound F) μ (mem (σ.fp - 12)) (mem $ τ.ap - 7)
        (spec_ec_mul mem κ range_check_ptr point scalar (mem (τ.ap - 7)) (cast_EcPoint  mem (τ.ap - 6)))) :=
begin
  apply ensures_of_ensuresb, intro νbound,
  have h_mem_rec := h_mem,
  unpack_memory code_ec_mul at h_mem with ⟨hpc0, hpc1, hpc2, hpc3, hpc4, hpc5, hpc6, hpc7, hpc8, hpc9, hpc10, hpc11, hpc12, hpc13, hpc14, hpc15, hpc16, hpc17, hpc18, hpc19, hpc20, hpc21, hpc22, hpc23, hpc24, hpc25, hpc26, hpc27, hpc28, hpc29, hpc30, hpc31, hpc32, hpc33, hpc34, hpc35, hpc36, hpc37, hpc38, hpc39, hpc40, hpc41, hpc42, hpc43, hpc44, hpc45, hpc46, hpc47, hpc48, hpc49, hpc50, hpc51, hpc52, hpc53, hpc54, hpc55, hpc56, hpc57, hpc58, hpc59, hpc60, hpc61, hpc62, hpc63, hpc64, hpc65, hpc66, hpc67, hpc68, hpc69, hpc70, hpc71, hpc72, hpc73, hpc74, hpc75, hpc76, hpc77, hpc78, hpc79⟩,
  -- ap += 18
  step_advance_ap hpc0 hpc1,
  -- function call
  step_assert_eq hpc2 with arg0,
  step_assert_eq hpc3 with arg1,
  step_assert_eq hpc4 with arg2,
  step_assert_eq hpc5 with arg3,
  step_assert_eq hpc6 with arg4,
  step_assert_eq hpc7 with arg5,
  step_assert_eq hpc8 with arg6,
  step_assert_eq hpc9 with arg7,
  step_assert_eq hpc10 hpc11 with arg8,
  step_sub hpc12 (auto_sound_ec_mul_inner mem _ range_check_ptr point scalar.d0 86 _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc13, norm_num2, exact h_mem_17 },
  { rw hpc13, norm_num2, exact h_mem_4 },
  { rw hpc13, norm_num2, exact h_mem_5 },
  { rw hpc13, norm_num2, exact h_mem_6 },
  { rw hpc13, norm_num2, exact h_mem_7 },
  { rw hpc13, norm_num2, exact h_mem_12 },
  { rw hpc13, norm_num2, exact h_mem_13 },
  { rw hpc13, norm_num2, exact h_mem_14 },
  { rw hpc13, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call14 ap14 h_call14,
  rcases h_call14 with ⟨rc_m14, rc_mle14, hl_range_check_ptr₁, h_call14⟩,
  mkdef htv_range_check_ptr₁ : range_check_ptr₁ = (mem (ap14 - 13)),
  simp only [←htv_range_check_ptr₁] at h_call14,
  mkdef htv_pow2_0 : pow2_0 = (cast_EcPoint mem (ap14 - 12)),
  simp only [←htv_pow2_0] at h_call14,
  mkdef htv_res0 : res0 = (cast_EcPoint mem (ap14 - 6)),
  simp only [←htv_res0] at h_call14,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8] at hl_range_check_ptr₁ },
  try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₁ }, try { rw [←hin_range_check_ptr] at hl_range_check_ptr₁ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8] at h_call14 },
  rw [hin_range_check_ptr] at h_call14,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8,
  -- local var
  step_assert_eq hpc14 with temp0,
  step_assert_eq hpc15 with temp1,
  step_assert_eq hpc16 with temp2,
  step_assert_eq hpc17 with temp3,
  step_assert_eq hpc18 with temp4,
  step_assert_eq hpc19 with temp5,
  have lc_res0: res0 = (cast_EcPoint mem (σ.fp)), {
    try { ext } ; {
      try { simp only [htv_res0] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [temp0, temp1, temp2, temp3, temp4, temp5] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  clear temp0 temp1 temp2 temp3 temp4 temp5,
  -- function call
  step_assert_eq hpc20 with arg0,
  step_assert_eq hpc21 with arg1,
  step_assert_eq hpc22 with arg2,
  step_assert_eq hpc23 with arg3,
  step_assert_eq hpc24 with arg4,
  step_assert_eq hpc25 with arg5,
  step_assert_eq hpc26 with arg6,
  step_assert_eq hpc27 with arg7,
  step_assert_eq hpc28 hpc29 with arg8,
  step_sub hpc30 (auto_sound_ec_mul_inner mem _ range_check_ptr₁ pow2_0 scalar.d1 86 _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc31, norm_num2, exact h_mem_17 },
  { rw hpc31, norm_num2, exact h_mem_4 },
  { rw hpc31, norm_num2, exact h_mem_5 },
  { rw hpc31, norm_num2, exact h_mem_6 },
  { rw hpc31, norm_num2, exact h_mem_7 },
  { rw hpc31, norm_num2, exact h_mem_12 },
  { rw hpc31, norm_num2, exact h_mem_13 },
  { rw hpc31, norm_num2, exact h_mem_14 },
  { rw hpc31, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call32 ap32 h_call32,
  rcases h_call32 with ⟨rc_m32, rc_mle32, hl_range_check_ptr₂, h_call32⟩,
  mkdef htv_range_check_ptr₂ : range_check_ptr₂ = (mem (ap32 - 13)),
  simp only [←htv_range_check_ptr₂] at h_call32,
  mkdef htv_pow2_1 : pow2_1 = (cast_EcPoint mem (ap32 - 12)),
  simp only [←htv_pow2_1] at h_call32,
  mkdef htv_res1 : res1 = (cast_EcPoint mem (ap32 - 6)),
  simp only [←htv_res1] at h_call32,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8] at hl_range_check_ptr₂ },
  try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₂ }, try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₂ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8] at h_call32 },
  rw [←htv_range_check_ptr₁, hl_range_check_ptr₁, hin_range_check_ptr] at h_call32,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8,
  -- local var
  step_assert_eq hpc32 with temp0,
  step_assert_eq hpc33 with temp1,
  step_assert_eq hpc34 with temp2,
  step_assert_eq hpc35 with temp3,
  step_assert_eq hpc36 with temp4,
  step_assert_eq hpc37 with temp5,
  have lc_res1: res1 = (cast_EcPoint mem (σ.fp + 6)), {
    try { ext } ; {
      try { simp only [htv_res1] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [temp0, temp1, temp2, temp3, temp4, temp5] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  clear temp0 temp1 temp2 temp3 temp4 temp5,
  -- function call
  step_assert_eq hpc38 with arg0,
  step_assert_eq hpc39 with arg1,
  step_assert_eq hpc40 with arg2,
  step_assert_eq hpc41 with arg3,
  step_assert_eq hpc42 with arg4,
  step_assert_eq hpc43 with arg5,
  step_assert_eq hpc44 with arg6,
  step_assert_eq hpc45 with arg7,
  step_assert_eq hpc46 hpc47 with arg8,
  step_sub hpc48 (auto_sound_ec_mul_inner mem _ range_check_ptr₂ pow2_1 scalar.d2 84 _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc49, norm_num2, exact h_mem_17 },
  { rw hpc49, norm_num2, exact h_mem_4 },
  { rw hpc49, norm_num2, exact h_mem_5 },
  { rw hpc49, norm_num2, exact h_mem_6 },
  { rw hpc49, norm_num2, exact h_mem_7 },
  { rw hpc49, norm_num2, exact h_mem_12 },
  { rw hpc49, norm_num2, exact h_mem_13 },
  { rw hpc49, norm_num2, exact h_mem_14 },
  { rw hpc49, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call50 ap50 h_call50,
  rcases h_call50 with ⟨rc_m50, rc_mle50, hl_range_check_ptr₃, h_call50⟩,
  mkdef htv_range_check_ptr₃ : range_check_ptr₃ = (mem (ap50 - 13)),
  simp only [←htv_range_check_ptr₃] at h_call50,
  mkdef htv_β : β = (cast_EcPoint mem (ap50 - 12)),
  simp only [←htv_β] at h_call50,
  mkdef htv_res2 : res2 = (cast_EcPoint mem (ap50 - 6)),
  simp only [←htv_res2] at h_call50,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8] at hl_range_check_ptr₃ },
  try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₃ }, try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₃ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8] at h_call50 },
  rw [←htv_range_check_ptr₂, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call50,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8,
  -- local var
  step_assert_eq hpc50 with temp0,
  step_assert_eq hpc51 with temp1,
  step_assert_eq hpc52 with temp2,
  step_assert_eq hpc53 with temp3,
  step_assert_eq hpc54 with temp4,
  step_assert_eq hpc55 with temp5,
  have lc_res2: res2 = (cast_EcPoint mem (σ.fp + 12)), {
    try { ext } ; {
      try { simp only [htv_res2] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [temp0, temp1, temp2, temp3, temp4, temp5] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  clear temp0 temp1 temp2 temp3 temp4 temp5,
  -- function call
  step_assert_eq hpc56 with arg0,
  step_assert_eq hpc57 with arg1,
  step_assert_eq hpc58 with arg2,
  step_assert_eq hpc59 with arg3,
  step_assert_eq hpc60 with arg4,
  step_assert_eq hpc61 with arg5,
  step_assert_eq hpc62 with arg6,
  step_assert_eq hpc63 with arg7,
  step_assert_eq hpc64 with arg8,
  step_assert_eq hpc65 with arg9,
  step_assert_eq hpc66 with arg10,
  step_assert_eq hpc67 with arg11,
  step_assert_eq hpc68 with arg12,
  step_sub hpc69 (auto_sound_ec_add mem _ range_check_ptr₃ res0 res1 _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc70, norm_num2, exact h_mem_16 },
  { rw hpc70, norm_num2, exact h_mem_4 },
  { rw hpc70, norm_num2, exact h_mem_5 },
  { rw hpc70, norm_num2, exact h_mem_6 },
  { rw hpc70, norm_num2, exact h_mem_7 },
  { rw hpc70, norm_num2, exact h_mem_8 },
  { rw hpc70, norm_num2, exact h_mem_12 },
  { rw hpc70, norm_num2, exact h_mem_13 },
  { rw hpc70, norm_num2, exact h_mem_14 },
  { rw hpc70, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1, htv_range_check_ptr₃, htv_β, htv_res2, lc_res2] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1, htv_range_check_ptr₃, htv_β, htv_res2, lc_res2] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1, htv_range_check_ptr₃, htv_β, htv_res2, lc_res2] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call71 ap71 h_call71,
  rcases h_call71 with ⟨rc_m71, rc_mle71, hl_range_check_ptr₄, h_call71⟩,
  mkdef htv_range_check_ptr₄ : range_check_ptr₄ = (mem (ap71 - 7)),
  simp only [←htv_range_check_ptr₄] at h_call71,
  mkdef htv_res : res = (cast_EcPoint mem (ap71 - 6)),
  simp only [←htv_res] at h_call71,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12] at hl_range_check_ptr₄ },
  try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₄ }, try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₄ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12] at h_call71 },
  rw [←htv_range_check_ptr₃, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call71,
  clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12,
  -- function call
  step_assert_eq hpc71 with arg0,
  step_assert_eq hpc72 with arg1,
  step_assert_eq hpc73 with arg2,
  step_assert_eq hpc74 with arg3,
  step_assert_eq hpc75 with arg4,
  step_assert_eq hpc76 with arg5,
  step_sub hpc77 (auto_sound_ec_add mem _ range_check_ptr₄ res res2 _ _ _ _ _ _ _ _ _ _ _ _ _),
  { rw hpc78, norm_num2, exact h_mem_16 },
  { rw hpc78, norm_num2, exact h_mem_4 },
  { rw hpc78, norm_num2, exact h_mem_5 },
  { rw hpc78, norm_num2, exact h_mem_6 },
  { rw hpc78, norm_num2, exact h_mem_7 },
  { rw hpc78, norm_num2, exact h_mem_8 },
  { rw hpc78, norm_num2, exact h_mem_12 },
  { rw hpc78, norm_num2, exact h_mem_13 },
  { rw hpc78, norm_num2, exact h_mem_14 },
  { rw hpc78, norm_num2, exact h_mem_15 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1, htv_range_check_ptr₃, htv_β, htv_res2, lc_res2, htv_range_check_ptr₄, htv_res] },
    try { dsimp [cast_EcPoint, cast_BigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1, htv_range_check_ptr₃, htv_β, htv_res2, lc_res2, htv_range_check_ptr₄, htv_res] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1, htv_range_check_ptr₃, htv_β, htv_res2, lc_res2, htv_range_check_ptr₄, htv_res] },
      try { dsimp [cast_EcPoint, cast_BigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call79 ap79 h_call79,
  rcases h_call79 with ⟨rc_m79, rc_mle79, hl_range_check_ptr₅, h_call79⟩,
  mkdef htv_range_check_ptr₅ : range_check_ptr₅ = (mem (ap79 - 7)),
  simp only [←htv_range_check_ptr₅] at h_call79,
  mkdef htv_res₁ : res₁ = (cast_EcPoint mem (ap79 - 6)),
  simp only [←htv_res₁] at h_call79,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₅ },
  try { rw [←htv_range_check_ptr₅] at hl_range_check_ptr₅ }, try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₅ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call79 },
  rw [←htv_range_check_ptr₄, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call79,
  clear arg0 arg1 arg2 arg3 arg4 arg5,
  -- return
  step_ret hpc79,
  -- finish
  step_done, use_only [rfl, rfl],
  -- range check condition
  use_only (rc_m14+rc_m32+rc_m50+rc_m71+rc_m79+0+0), split,
  linarith [rc_mle14, rc_mle32, rc_mle50, rc_mle71, rc_mle79],
  split,
  { try { norm_num1 }, arith_simps,
    try { rw [←htv_range_check_ptr₅] }, try { rw [hl_range_check_ptr₅] }, try { rw [←htv_range_check_ptr₄] }, try { rw [hl_range_check_ptr₄] }, try { rw [←htv_range_check_ptr₃] }, try { rw [hl_range_check_ptr₃] }, try { rw [←htv_range_check_ptr₂] }, try { rw [hl_range_check_ptr₂] }, try { rw [←htv_range_check_ptr₁] }, try { rw [hl_range_check_ptr₁] }, try { rw [hin_range_check_ptr] },
    try { ring_nf }, try { arith_simps, refl <|> norm_cast }, try { refl } },
  intro rc_h_range_check_ptr, repeat { rw [add_assoc] at rc_h_range_check_ptr },
  have rc_h_range_check_ptr' := range_checked_add_right rc_h_range_check_ptr,
  -- Final Proof
  -- user-provided reduction
  suffices auto_spec: auto_spec_ec_mul mem _ range_check_ptr point scalar _ _,
  { apply sound_ec_mul, apply auto_spec },
  -- prove the auto generated assertion
  dsimp [auto_spec_ec_mul],
  try { norm_num1 }, try { arith_simps },
  use_only [κ_call14],
  use_only [range_check_ptr₁],
  use_only [pow2_0],
  use_only [res0],
  have rc_h_range_check_ptr₁ := range_checked_offset' rc_h_range_check_ptr,
  have rc_h_range_check_ptr₁' := range_checked_add_right rc_h_range_check_ptr₁, try { norm_cast at rc_h_range_check_ptr₁' },
  have spec14 := h_call14 rc_h_range_check_ptr',
    try { rw [←hin_range_check_ptr] at spec14 }, try { rw [←htv_range_check_ptr₁] at spec14 },
  try { dsimp at spec14, arith_simps at spec14 },
  use_only [spec14],
  use_only [κ_call32],
  use_only [range_check_ptr₂],
  use_only [pow2_1],
  use_only [res1],
  have rc_h_range_check_ptr₂ := range_checked_offset' rc_h_range_check_ptr₁,
  have rc_h_range_check_ptr₂' := range_checked_add_right rc_h_range_check_ptr₂, try { norm_cast at rc_h_range_check_ptr₂' },
  have spec32 := h_call32 rc_h_range_check_ptr₁',
    try { rw [←hin_range_check_ptr] at spec32 }, try { rw [←hl_range_check_ptr₁] at spec32 }, try { rw [←htv_range_check_ptr₂] at spec32 },
  try { dsimp at spec32, arith_simps at spec32 },
  use_only [spec32],
  use_only [κ_call50],
  use_only [range_check_ptr₃],
  use_only [β],
  use_only [res2],
  have rc_h_range_check_ptr₃ := range_checked_offset' rc_h_range_check_ptr₂,
  have rc_h_range_check_ptr₃' := range_checked_add_right rc_h_range_check_ptr₃, try { norm_cast at rc_h_range_check_ptr₃' },
  have spec50 := h_call50 rc_h_range_check_ptr₂',
    try { rw [←hin_range_check_ptr] at spec50 }, try { rw [←hl_range_check_ptr₁] at spec50 }, try { rw [←hl_range_check_ptr₂] at spec50 }, try { rw [←htv_range_check_ptr₃] at spec50 },
  try { dsimp at spec50, arith_simps at spec50 },
  use_only [spec50],
  use_only [κ_call71],
  use_only [range_check_ptr₄],
  use_only [res],
  have rc_h_range_check_ptr₄ := range_checked_offset' rc_h_range_check_ptr₃,
  have rc_h_range_check_ptr₄' := range_checked_add_right rc_h_range_check_ptr₄, try { norm_cast at rc_h_range_check_ptr₄' },
  have spec71 := h_call71 rc_h_range_check_ptr₃',
    try { rw [←hin_range_check_ptr] at spec71 }, try { rw [←hl_range_check_ptr₁] at spec71 }, try { rw [←hl_range_check_ptr₂] at spec71 }, try { rw [←hl_range_check_ptr₃] at spec71 }, try { rw [←htv_range_check_ptr₄] at spec71 },
  try { dsimp at spec71, arith_simps at spec71 },
  use_only [spec71],
  use_only [κ_call79],
  use_only [range_check_ptr₅],
  use_only [res₁],
  have rc_h_range_check_ptr₅ := range_checked_offset' rc_h_range_check_ptr₄,
  have rc_h_range_check_ptr₅' := range_checked_add_right rc_h_range_check_ptr₅, try { norm_cast at rc_h_range_check_ptr₅' },
  have spec79 := h_call79 rc_h_range_check_ptr₄',
    try { rw [←hin_range_check_ptr] at spec79 }, try { rw [←hl_range_check_ptr₁] at spec79 }, try { rw [←hl_range_check_ptr₂] at spec79 }, try { rw [←hl_range_check_ptr₃] at spec79 }, try { rw [←hl_range_check_ptr₄] at spec79 }, try { rw [←htv_range_check_ptr₅] at spec79 },
  try { dsimp at spec79, arith_simps at spec79 },
  use_only [spec79],
  try { split, trivial <|> linarith },
  try { ensures_simps; try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_scalar, htv_range_check_ptr₁, htv_pow2_0, htv_res0, lc_res0, htv_range_check_ptr₂, htv_pow2_1, htv_res1, lc_res1, htv_range_check_ptr₃, htv_β, htv_res2, lc_res2, htv_range_check_ptr₄, htv_res, htv_range_check_ptr₅, htv_res₁] }, },
  try { dsimp [cast_EcPoint, cast_BigInt3] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
end

