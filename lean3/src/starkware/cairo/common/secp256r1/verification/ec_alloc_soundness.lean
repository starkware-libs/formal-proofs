/-
File: ec_alloc_soundness.lean

Autogenerated file.
-/
import starkware.cairo.lean.semantics.soundness.hoare
import .ec_code
import ..ec_spec
open tactic

open starkware.cairo.common.alloc

variables {F : Type} [field F] [decidable_eq F] [prelude_hyps F]
variable  mem : F → F
variable  σ : register_state F

/- starkware.cairo.common.alloc.alloc autogenerated soundness theorem -/

theorem auto_sound_alloc
    -- code is in memory at σ.pc
    (h_mem : mem_at mem code_alloc σ.pc)
    -- input arguments on the stack
    -- conclusion
  : ensures_ret mem σ (λ κ τ, τ.ap = σ.ap + 1 ∧ spec_alloc mem κ (mem (τ.ap - 1))) :=
begin
  apply ensures_of_ensuresb, intro νbound,
  have h_mem_rec := h_mem,
  unpack_memory code_alloc at h_mem with ⟨hpc0, hpc1, hpc2⟩,
  -- ap += 1
  step_advance_ap hpc0 hpc1,
  -- return
  step_ret hpc2,
  -- finish
  step_done, use_only [rfl, rfl],
  split, refl,
  -- TODO(Jeremy): manually provided proof
  trivial,
  -- -- Final Proof
  -- -- user-provided reduction
  -- suffices auto_spec: auto_spec_alloc mem _  _,
  -- { apply sound_alloc, apply auto_spec },
  -- -- prove the auto generated assertion
  -- dsimp [auto_spec_alloc],
  -- try { norm_num1 }, try { arith_simps },
  -- try { split, trivial <|> linarith },
  -- try { ensures_simps; try { simp only [add_neg_eq_sub] }, },
  -- try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
end

