/-
File: ec_build_ec_mul_table_soundness.lean

Autogenerated file.
-/
import starkware.cairo.lean.semantics.soundness.hoare
import .ec_code
import ..ec_spec
import .ec_fast_ec_add_soundness
import .ec_ec_double_soundness
open tactic

open starkware.cairo.common.secp256r1.ec
open starkware.cairo.common.cairo_secp.bigint3
open starkware.cairo.common.secp256r1.field
open starkware.cairo.common.cairo_secp.ec_point
open starkware.cairo.common.secp256r1.bigint

variables {F : Type} [field F] [decidable_eq F] [prelude_hyps F]
variable  mem : F → F
variable  σ : register_state F

/- starkware.cairo.common.secp256r1.ec.build_ec_mul_table autogenerated soundness theorem -/

theorem auto_sound_build_ec_mul_table
    -- arguments
    (range_check_ptr : F) (point : EcPoint mem) (table : π_EcPoint mem)
    -- code is in memory at σ.pc
    (h_mem : mem_at mem code_build_ec_mul_table σ.pc)
    -- all dependencies are in memory
    (h_mem_4 : mem_at mem code_nondet_bigint3 (σ.pc  - 946))
    (h_mem_5 : mem_at mem code_unreduced_mul (σ.pc  - 933))
    (h_mem_6 : mem_at mem code_unreduced_sqr (σ.pc  - 895))
    (h_mem_7 : mem_at mem code_assert_165_bit (σ.pc  - 861))
    (h_mem_8 : mem_at mem code_verify_zero (σ.pc  - 850))
    (h_mem_12 : mem_at mem code_compute_doubling_slope (σ.pc  - 727))
    (h_mem_13 : mem_at mem code_compute_slope (σ.pc  - 681))
    (h_mem_14 : mem_at mem code_ec_double (σ.pc  - 657))
    (h_mem_15 : mem_at mem code_fast_ec_add (σ.pc  - 584))
    -- input arguments on the stack
    (hin_range_check_ptr : range_check_ptr = mem (σ.fp - 10))
    (hin_point : point = cast_EcPoint mem (σ.fp - 9))
    (hin_table : table = cast_π_EcPoint mem (mem (σ.fp - 3)))
    -- conclusion
  : ensures_ret mem σ (λ κ τ,
      ∃ μ ≤ κ, rc_ensures mem (rc_bound F) μ (mem (σ.fp - 10)) (mem $ τ.ap - 1)
        (spec_build_ec_mul_table mem κ range_check_ptr point table (mem (τ.ap - 1)))) :=
begin
  apply ensures_of_ensuresb, intro νbound,
  have h_mem_rec := h_mem,
  unpack_memory code_build_ec_mul_table at h_mem with ⟨hpc0, hpc1, hpc2, hpc3, hpc4, hpc5, hpc6, hpc7, hpc8, hpc9, hpc10, hpc11, hpc12, hpc13, hpc14, hpc15, hpc16, hpc17, hpc18, hpc19, hpc20, hpc21, hpc22, hpc23, hpc24, hpc25, hpc26, hpc27, hpc28, hpc29, hpc30, hpc31, hpc32, hpc33, hpc34, hpc35, hpc36, hpc37, hpc38, hpc39, hpc40, hpc41, hpc42, hpc43, hpc44, hpc45, hpc46, hpc47, hpc48, hpc49, hpc50, hpc51, hpc52, hpc53, hpc54, hpc55, hpc56, hpc57, hpc58, hpc59, hpc60, hpc61, hpc62, hpc63, hpc64, hpc65, hpc66, hpc67, hpc68, hpc69, hpc70, hpc71, hpc72, hpc73, hpc74, hpc75, hpc76, hpc77, hpc78, hpc79, hpc80, hpc81, hpc82, hpc83, hpc84, hpc85, hpc86, hpc87, hpc88, hpc89, hpc90, hpc91, hpc92, hpc93, hpc94, hpc95, hpc96, hpc97, hpc98, hpc99, hpc100, hpc101, hpc102, hpc103, hpc104, hpc105, hpc106, hpc107, hpc108, hpc109, hpc110, hpc111, hpc112, hpc113, hpc114, hpc115, hpc116, hpc117, hpc118, hpc119, hpc120, hpc121, hpc122, hpc123, hpc124, hpc125, hpc126, hpc127, hpc128, hpc129, hpc130, hpc131, hpc132, hpc133, hpc134, hpc135, hpc136, hpc137, hpc138, hpc139, hpc140, hpc141, hpc142, hpc143, hpc144, hpc145, hpc146, hpc147, hpc148, hpc149, hpc150, hpc151, hpc152, hpc153, hpc154, hpc155, hpc156, hpc157, hpc158, hpc159, hpc160, hpc161, hpc162, hpc163, hpc164, hpc165, hpc166, hpc167, hpc168, hpc169, hpc170, hpc171, hpc172, hpc173, hpc174, hpc175, hpc176, hpc177, hpc178, hpc179, hpc180, hpc181, hpc182, hpc183, hpc184, hpc185, hpc186, hpc187, hpc188, hpc189, hpc190, hpc191, hpc192, hpc193, hpc194, hpc195, hpc196, hpc197, hpc198, hpc199, hpc200, hpc201, hpc202, hpc203, hpc204, hpc205, hpc206, hpc207, hpc208, hpc209, hpc210, hpc211, hpc212, hpc213, hpc214, hpc215, hpc216, hpc217, hpc218, hpc219, hpc220, hpc221, hpc222⟩,
  -- compound assert eq
  step_assert_eq hpc0 hpc1 with temp0,
  step_assert_eq hpc2 with temp1,
  step_assert_eq hpc3 hpc4 with temp2,
  step_assert_eq hpc5 with temp3,
  step_assert_eq hpc6 hpc7 with temp4,
  step_assert_eq hpc8 with temp5,
  step_assert_eq hpc9 hpc10 with temp6,
  step_assert_eq hpc11 with temp7,
  step_assert_eq hpc12 hpc13 with temp8,
  step_assert_eq hpc14 with temp9,
  step_assert_eq hpc15 hpc16 with temp10,
  step_assert_eq hpc17 with temp11,
  have a0: cast_EcPoint mem (table.σ_ptr) = {
    x := { d0 := 0, d1 := 0, d2 := 0 },
    y := { d0 := 0, d1 := 0, d2 := 0 }
  }, {
    try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [temp0, temp1.symm, temp2, temp3.symm, temp4, temp5.symm, temp6, temp7.symm, temp8, temp9.symm, temp10, temp11.symm] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5 temp6 temp7 temp8 temp9 temp10 temp11,
-- compound assert eq
step_assert_eq hpc18 with temp0,
step_assert_eq hpc19 with temp1,
step_assert_eq hpc20 with temp2,
step_assert_eq hpc21 with temp3,
step_assert_eq hpc22 with temp4,
step_assert_eq hpc23 with temp5,
have a18: cast_EcPoint mem (table.σ_ptr + 6) = point, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc24 with arg0,
step_assert_eq hpc25 with arg1,
step_assert_eq hpc26 with arg2,
step_assert_eq hpc27 with arg3,
step_assert_eq hpc28 with arg4,
step_assert_eq hpc29 with arg5,
step_assert_eq hpc30 with arg6,
step_sub hpc31 (auto_sound_ec_double mem _ range_check_ptr point _ _ _ _ _ _ _ _ _),
{ rw hpc32, norm_num2, exact h_mem_14 },
{ rw hpc32, norm_num2, exact h_mem_4 },
{ rw hpc32, norm_num2, exact h_mem_5 },
{ rw hpc32, norm_num2, exact h_mem_6 },
{ rw hpc32, norm_num2, exact h_mem_7 },
{ rw hpc32, norm_num2, exact h_mem_8 },
{ rw hpc32, norm_num2, exact h_mem_12 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call33 ap33 h_call33,
rcases h_call33 with ⟨rc_m33, rc_mle33, hl_range_check_ptr₁, h_call33⟩,
mkdef htv_range_check_ptr₁ : range_check_ptr₁ = (mem (ap33 - 7)),
simp only [←htv_range_check_ptr₁] at h_call33,
mkdef htv_t2 : t2 = (cast_EcPoint mem (ap33 - 6)),
simp only [←htv_t2] at h_call33,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6] at hl_range_check_ptr₁ },
try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₁ }, try { rw [←hin_range_check_ptr] at hl_range_check_ptr₁ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6] at h_call33 },
rw [hin_range_check_ptr] at h_call33,
clear arg0 arg1 arg2 arg3 arg4 arg5 arg6,
-- compound assert eq
step_assert_eq hpc33 with temp0,
step_assert_eq hpc34 with temp1,
step_assert_eq hpc35 with temp2,
step_assert_eq hpc36 with temp3,
step_assert_eq hpc37 with temp4,
step_assert_eq hpc38 with temp5,
have a33: cast_EcPoint mem (table.σ_ptr + 12) = t2, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc39 with arg0,
step_assert_eq hpc40 with arg1,
step_assert_eq hpc41 with arg2,
step_assert_eq hpc42 with arg3,
step_assert_eq hpc43 with arg4,
step_assert_eq hpc44 with arg5,
step_sub hpc45 (auto_sound_fast_ec_add mem _ range_check_ptr₁ t2 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc46, norm_num2, exact h_mem_15 },
{ rw hpc46, norm_num2, exact h_mem_4 },
{ rw hpc46, norm_num2, exact h_mem_5 },
{ rw hpc46, norm_num2, exact h_mem_6 },
{ rw hpc46, norm_num2, exact h_mem_7 },
{ rw hpc46, norm_num2, exact h_mem_8 },
{ rw hpc46, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call47 ap47 h_call47,
rcases h_call47 with ⟨rc_m47, rc_mle47, hl_range_check_ptr₂, h_call47⟩,
mkdef htv_range_check_ptr₂ : range_check_ptr₂ = (mem (ap47 - 7)),
simp only [←htv_range_check_ptr₂] at h_call47,
mkdef htv_t3 : t3 = (cast_EcPoint mem (ap47 - 6)),
simp only [←htv_t3] at h_call47,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₂ },
try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₂ }, try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₂ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call47 },
rw [←htv_range_check_ptr₁, hl_range_check_ptr₁, hin_range_check_ptr] at h_call47,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc47 with temp0,
step_assert_eq hpc48 with temp1,
step_assert_eq hpc49 with temp2,
step_assert_eq hpc50 with temp3,
step_assert_eq hpc51 with temp4,
step_assert_eq hpc52 with temp5,
have a47: cast_EcPoint mem (table.σ_ptr + 18) = t3, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc53 with arg0,
step_assert_eq hpc54 with arg1,
step_assert_eq hpc55 with arg2,
step_assert_eq hpc56 with arg3,
step_assert_eq hpc57 with arg4,
step_assert_eq hpc58 with arg5,
step_sub hpc59 (auto_sound_fast_ec_add mem _ range_check_ptr₂ t3 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc60, norm_num2, exact h_mem_15 },
{ rw hpc60, norm_num2, exact h_mem_4 },
{ rw hpc60, norm_num2, exact h_mem_5 },
{ rw hpc60, norm_num2, exact h_mem_6 },
{ rw hpc60, norm_num2, exact h_mem_7 },
{ rw hpc60, norm_num2, exact h_mem_8 },
{ rw hpc60, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call61 ap61 h_call61,
rcases h_call61 with ⟨rc_m61, rc_mle61, hl_range_check_ptr₃, h_call61⟩,
mkdef htv_range_check_ptr₃ : range_check_ptr₃ = (mem (ap61 - 7)),
simp only [←htv_range_check_ptr₃] at h_call61,
mkdef htv_t4 : t4 = (cast_EcPoint mem (ap61 - 6)),
simp only [←htv_t4] at h_call61,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₃ },
try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₃ }, try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₃ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call61 },
rw [←htv_range_check_ptr₂, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call61,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc61 with temp0,
step_assert_eq hpc62 with temp1,
step_assert_eq hpc63 with temp2,
step_assert_eq hpc64 with temp3,
step_assert_eq hpc65 with temp4,
step_assert_eq hpc66 with temp5,
have a61: cast_EcPoint mem (table.σ_ptr + 24) = t4, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc67 with arg0,
step_assert_eq hpc68 with arg1,
step_assert_eq hpc69 with arg2,
step_assert_eq hpc70 with arg3,
step_assert_eq hpc71 with arg4,
step_assert_eq hpc72 with arg5,
step_sub hpc73 (auto_sound_fast_ec_add mem _ range_check_ptr₃ t4 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc74, norm_num2, exact h_mem_15 },
{ rw hpc74, norm_num2, exact h_mem_4 },
{ rw hpc74, norm_num2, exact h_mem_5 },
{ rw hpc74, norm_num2, exact h_mem_6 },
{ rw hpc74, norm_num2, exact h_mem_7 },
{ rw hpc74, norm_num2, exact h_mem_8 },
{ rw hpc74, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call75 ap75 h_call75,
rcases h_call75 with ⟨rc_m75, rc_mle75, hl_range_check_ptr₄, h_call75⟩,
mkdef htv_range_check_ptr₄ : range_check_ptr₄ = (mem (ap75 - 7)),
simp only [←htv_range_check_ptr₄] at h_call75,
mkdef htv_t5 : t5 = (cast_EcPoint mem (ap75 - 6)),
simp only [←htv_t5] at h_call75,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₄ },
try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₄ }, try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₄ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call75 },
rw [←htv_range_check_ptr₃, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call75,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc75 with temp0,
step_assert_eq hpc76 with temp1,
step_assert_eq hpc77 with temp2,
step_assert_eq hpc78 with temp3,
step_assert_eq hpc79 with temp4,
step_assert_eq hpc80 with temp5,
have a75: cast_EcPoint mem (table.σ_ptr + 30) = t5, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc81 with arg0,
step_assert_eq hpc82 with arg1,
step_assert_eq hpc83 with arg2,
step_assert_eq hpc84 with arg3,
step_assert_eq hpc85 with arg4,
step_assert_eq hpc86 with arg5,
step_sub hpc87 (auto_sound_fast_ec_add mem _ range_check_ptr₄ t5 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc88, norm_num2, exact h_mem_15 },
{ rw hpc88, norm_num2, exact h_mem_4 },
{ rw hpc88, norm_num2, exact h_mem_5 },
{ rw hpc88, norm_num2, exact h_mem_6 },
{ rw hpc88, norm_num2, exact h_mem_7 },
{ rw hpc88, norm_num2, exact h_mem_8 },
{ rw hpc88, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call89 ap89 h_call89,
rcases h_call89 with ⟨rc_m89, rc_mle89, hl_range_check_ptr₅, h_call89⟩,
mkdef htv_range_check_ptr₅ : range_check_ptr₅ = (mem (ap89 - 7)),
simp only [←htv_range_check_ptr₅] at h_call89,
mkdef htv_t6 : t6 = (cast_EcPoint mem (ap89 - 6)),
simp only [←htv_t6] at h_call89,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₅ },
try { rw [←htv_range_check_ptr₅] at hl_range_check_ptr₅ }, try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₅ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call89 },
rw [←htv_range_check_ptr₄, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call89,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc89 with temp0,
step_assert_eq hpc90 with temp1,
step_assert_eq hpc91 with temp2,
step_assert_eq hpc92 with temp3,
step_assert_eq hpc93 with temp4,
step_assert_eq hpc94 with temp5,
have a89: cast_EcPoint mem (table.σ_ptr + 36) = t6, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc95 with arg0,
step_assert_eq hpc96 with arg1,
step_assert_eq hpc97 with arg2,
step_assert_eq hpc98 with arg3,
step_assert_eq hpc99 with arg4,
step_assert_eq hpc100 with arg5,
step_sub hpc101 (auto_sound_fast_ec_add mem _ range_check_ptr₅ t6 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc102, norm_num2, exact h_mem_15 },
{ rw hpc102, norm_num2, exact h_mem_4 },
{ rw hpc102, norm_num2, exact h_mem_5 },
{ rw hpc102, norm_num2, exact h_mem_6 },
{ rw hpc102, norm_num2, exact h_mem_7 },
{ rw hpc102, norm_num2, exact h_mem_8 },
{ rw hpc102, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call103 ap103 h_call103,
rcases h_call103 with ⟨rc_m103, rc_mle103, hl_range_check_ptr₆, h_call103⟩,
mkdef htv_range_check_ptr₆ : range_check_ptr₆ = (mem (ap103 - 7)),
simp only [←htv_range_check_ptr₆] at h_call103,
mkdef htv_t7 : t7 = (cast_EcPoint mem (ap103 - 6)),
simp only [←htv_t7] at h_call103,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₆ },
try { rw [←htv_range_check_ptr₆] at hl_range_check_ptr₆ }, try { rw [←htv_range_check_ptr₅] at hl_range_check_ptr₆ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call103 },
rw [←htv_range_check_ptr₅, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call103,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc103 with temp0,
step_assert_eq hpc104 with temp1,
step_assert_eq hpc105 with temp2,
step_assert_eq hpc106 with temp3,
step_assert_eq hpc107 with temp4,
step_assert_eq hpc108 with temp5,
have a103: cast_EcPoint mem (table.σ_ptr + 42) = t7, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc109 with arg0,
step_assert_eq hpc110 with arg1,
step_assert_eq hpc111 with arg2,
step_assert_eq hpc112 with arg3,
step_assert_eq hpc113 with arg4,
step_assert_eq hpc114 with arg5,
step_sub hpc115 (auto_sound_fast_ec_add mem _ range_check_ptr₆ t7 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc116, norm_num2, exact h_mem_15 },
{ rw hpc116, norm_num2, exact h_mem_4 },
{ rw hpc116, norm_num2, exact h_mem_5 },
{ rw hpc116, norm_num2, exact h_mem_6 },
{ rw hpc116, norm_num2, exact h_mem_7 },
{ rw hpc116, norm_num2, exact h_mem_8 },
{ rw hpc116, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call117 ap117 h_call117,
rcases h_call117 with ⟨rc_m117, rc_mle117, hl_range_check_ptr₇, h_call117⟩,
mkdef htv_range_check_ptr₇ : range_check_ptr₇ = (mem (ap117 - 7)),
simp only [←htv_range_check_ptr₇] at h_call117,
mkdef htv_t8 : t8 = (cast_EcPoint mem (ap117 - 6)),
simp only [←htv_t8] at h_call117,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₇ },
try { rw [←htv_range_check_ptr₇] at hl_range_check_ptr₇ }, try { rw [←htv_range_check_ptr₆] at hl_range_check_ptr₇ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call117 },
rw [←htv_range_check_ptr₆, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call117,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc117 with temp0,
step_assert_eq hpc118 with temp1,
step_assert_eq hpc119 with temp2,
step_assert_eq hpc120 with temp3,
step_assert_eq hpc121 with temp4,
step_assert_eq hpc122 with temp5,
have a117: cast_EcPoint mem (table.σ_ptr + 48) = t8, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc123 with arg0,
step_assert_eq hpc124 with arg1,
step_assert_eq hpc125 with arg2,
step_assert_eq hpc126 with arg3,
step_assert_eq hpc127 with arg4,
step_assert_eq hpc128 with arg5,
step_sub hpc129 (auto_sound_fast_ec_add mem _ range_check_ptr₇ t8 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc130, norm_num2, exact h_mem_15 },
{ rw hpc130, norm_num2, exact h_mem_4 },
{ rw hpc130, norm_num2, exact h_mem_5 },
{ rw hpc130, norm_num2, exact h_mem_6 },
{ rw hpc130, norm_num2, exact h_mem_7 },
{ rw hpc130, norm_num2, exact h_mem_8 },
{ rw hpc130, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call131 ap131 h_call131,
rcases h_call131 with ⟨rc_m131, rc_mle131, hl_range_check_ptr₈, h_call131⟩,
mkdef htv_range_check_ptr₈ : range_check_ptr₈ = (mem (ap131 - 7)),
simp only [←htv_range_check_ptr₈] at h_call131,
mkdef htv_t9 : t9 = (cast_EcPoint mem (ap131 - 6)),
simp only [←htv_t9] at h_call131,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₈ },
try { rw [←htv_range_check_ptr₈] at hl_range_check_ptr₈ }, try { rw [←htv_range_check_ptr₇] at hl_range_check_ptr₈ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call131 },
rw [←htv_range_check_ptr₇, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call131,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc131 with temp0,
step_assert_eq hpc132 with temp1,
step_assert_eq hpc133 with temp2,
step_assert_eq hpc134 with temp3,
step_assert_eq hpc135 with temp4,
step_assert_eq hpc136 with temp5,
have a131: cast_EcPoint mem (table.σ_ptr + 54) = t9, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc137 with arg0,
step_assert_eq hpc138 with arg1,
step_assert_eq hpc139 with arg2,
step_assert_eq hpc140 with arg3,
step_assert_eq hpc141 with arg4,
step_assert_eq hpc142 with arg5,
step_sub hpc143 (auto_sound_fast_ec_add mem _ range_check_ptr₈ t9 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc144, norm_num2, exact h_mem_15 },
{ rw hpc144, norm_num2, exact h_mem_4 },
{ rw hpc144, norm_num2, exact h_mem_5 },
{ rw hpc144, norm_num2, exact h_mem_6 },
{ rw hpc144, norm_num2, exact h_mem_7 },
{ rw hpc144, norm_num2, exact h_mem_8 },
{ rw hpc144, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call145 ap145 h_call145,
rcases h_call145 with ⟨rc_m145, rc_mle145, hl_range_check_ptr₉, h_call145⟩,
mkdef htv_range_check_ptr₉ : range_check_ptr₉ = (mem (ap145 - 7)),
simp only [←htv_range_check_ptr₉] at h_call145,
mkdef htv_t10 : t10 = (cast_EcPoint mem (ap145 - 6)),
simp only [←htv_t10] at h_call145,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₉ },
try { rw [←htv_range_check_ptr₉] at hl_range_check_ptr₉ }, try { rw [←htv_range_check_ptr₈] at hl_range_check_ptr₉ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call145 },
rw [←htv_range_check_ptr₈, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call145,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc145 with temp0,
step_assert_eq hpc146 with temp1,
step_assert_eq hpc147 with temp2,
step_assert_eq hpc148 with temp3,
step_assert_eq hpc149 with temp4,
step_assert_eq hpc150 with temp5,
have a145: cast_EcPoint mem (table.σ_ptr + 60) = t10, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc151 with arg0,
step_assert_eq hpc152 with arg1,
step_assert_eq hpc153 with arg2,
step_assert_eq hpc154 with arg3,
step_assert_eq hpc155 with arg4,
step_assert_eq hpc156 with arg5,
step_sub hpc157 (auto_sound_fast_ec_add mem _ range_check_ptr₉ t10 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc158, norm_num2, exact h_mem_15 },
{ rw hpc158, norm_num2, exact h_mem_4 },
{ rw hpc158, norm_num2, exact h_mem_5 },
{ rw hpc158, norm_num2, exact h_mem_6 },
{ rw hpc158, norm_num2, exact h_mem_7 },
{ rw hpc158, norm_num2, exact h_mem_8 },
{ rw hpc158, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call159 ap159 h_call159,
rcases h_call159 with ⟨rc_m159, rc_mle159, hl_range_check_ptr₁₀, h_call159⟩,
mkdef htv_range_check_ptr₁₀ : range_check_ptr₁₀ = (mem (ap159 - 7)),
simp only [←htv_range_check_ptr₁₀] at h_call159,
mkdef htv_t11 : t11 = (cast_EcPoint mem (ap159 - 6)),
simp only [←htv_t11] at h_call159,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₁₀ },
try { rw [←htv_range_check_ptr₁₀] at hl_range_check_ptr₁₀ }, try { rw [←htv_range_check_ptr₉] at hl_range_check_ptr₁₀ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call159 },
rw [←htv_range_check_ptr₉, hl_range_check_ptr₉, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call159,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc159 with temp0,
step_assert_eq hpc160 with temp1,
step_assert_eq hpc161 with temp2,
step_assert_eq hpc162 with temp3,
step_assert_eq hpc163 with temp4,
step_assert_eq hpc164 with temp5,
have a159: cast_EcPoint mem (table.σ_ptr + 66) = t11, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc165 with arg0,
step_assert_eq hpc166 with arg1,
step_assert_eq hpc167 with arg2,
step_assert_eq hpc168 with arg3,
step_assert_eq hpc169 with arg4,
step_assert_eq hpc170 with arg5,
step_sub hpc171 (auto_sound_fast_ec_add mem _ range_check_ptr₁₀ t11 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc172, norm_num2, exact h_mem_15 },
{ rw hpc172, norm_num2, exact h_mem_4 },
{ rw hpc172, norm_num2, exact h_mem_5 },
{ rw hpc172, norm_num2, exact h_mem_6 },
{ rw hpc172, norm_num2, exact h_mem_7 },
{ rw hpc172, norm_num2, exact h_mem_8 },
{ rw hpc172, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call173 ap173 h_call173,
rcases h_call173 with ⟨rc_m173, rc_mle173, hl_range_check_ptr₁₁, h_call173⟩,
mkdef htv_range_check_ptr₁₁ : range_check_ptr₁₁ = (mem (ap173 - 7)),
simp only [←htv_range_check_ptr₁₁] at h_call173,
mkdef htv_t12 : t12 = (cast_EcPoint mem (ap173 - 6)),
simp only [←htv_t12] at h_call173,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₁₁ },
try { rw [←htv_range_check_ptr₁₁] at hl_range_check_ptr₁₁ }, try { rw [←htv_range_check_ptr₁₀] at hl_range_check_ptr₁₁ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call173 },
rw [←htv_range_check_ptr₁₀, hl_range_check_ptr₁₀, hl_range_check_ptr₉, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call173,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc173 with temp0,
step_assert_eq hpc174 with temp1,
step_assert_eq hpc175 with temp2,
step_assert_eq hpc176 with temp3,
step_assert_eq hpc177 with temp4,
step_assert_eq hpc178 with temp5,
have a173: cast_EcPoint mem (table.σ_ptr + 72) = t12, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc179 with arg0,
step_assert_eq hpc180 with arg1,
step_assert_eq hpc181 with arg2,
step_assert_eq hpc182 with arg3,
step_assert_eq hpc183 with arg4,
step_assert_eq hpc184 with arg5,
step_sub hpc185 (auto_sound_fast_ec_add mem _ range_check_ptr₁₁ t12 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc186, norm_num2, exact h_mem_15 },
{ rw hpc186, norm_num2, exact h_mem_4 },
{ rw hpc186, norm_num2, exact h_mem_5 },
{ rw hpc186, norm_num2, exact h_mem_6 },
{ rw hpc186, norm_num2, exact h_mem_7 },
{ rw hpc186, norm_num2, exact h_mem_8 },
{ rw hpc186, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call187 ap187 h_call187,
rcases h_call187 with ⟨rc_m187, rc_mle187, hl_range_check_ptr₁₂, h_call187⟩,
mkdef htv_range_check_ptr₁₂ : range_check_ptr₁₂ = (mem (ap187 - 7)),
simp only [←htv_range_check_ptr₁₂] at h_call187,
mkdef htv_t13 : t13 = (cast_EcPoint mem (ap187 - 6)),
simp only [←htv_t13] at h_call187,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₁₂ },
try { rw [←htv_range_check_ptr₁₂] at hl_range_check_ptr₁₂ }, try { rw [←htv_range_check_ptr₁₁] at hl_range_check_ptr₁₂ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call187 },
rw [←htv_range_check_ptr₁₁, hl_range_check_ptr₁₁, hl_range_check_ptr₁₀, hl_range_check_ptr₉, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call187,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc187 with temp0,
step_assert_eq hpc188 with temp1,
step_assert_eq hpc189 with temp2,
step_assert_eq hpc190 with temp3,
step_assert_eq hpc191 with temp4,
step_assert_eq hpc192 with temp5,
have a187: cast_EcPoint mem (table.σ_ptr + 78) = t13, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc193 with arg0,
step_assert_eq hpc194 with arg1,
step_assert_eq hpc195 with arg2,
step_assert_eq hpc196 with arg3,
step_assert_eq hpc197 with arg4,
step_assert_eq hpc198 with arg5,
step_sub hpc199 (auto_sound_fast_ec_add mem _ range_check_ptr₁₂ t13 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc200, norm_num2, exact h_mem_15 },
{ rw hpc200, norm_num2, exact h_mem_4 },
{ rw hpc200, norm_num2, exact h_mem_5 },
{ rw hpc200, norm_num2, exact h_mem_6 },
{ rw hpc200, norm_num2, exact h_mem_7 },
{ rw hpc200, norm_num2, exact h_mem_8 },
{ rw hpc200, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call201 ap201 h_call201,
rcases h_call201 with ⟨rc_m201, rc_mle201, hl_range_check_ptr₁₃, h_call201⟩,
mkdef htv_range_check_ptr₁₃ : range_check_ptr₁₃ = (mem (ap201 - 7)),
simp only [←htv_range_check_ptr₁₃] at h_call201,
mkdef htv_t14 : t14 = (cast_EcPoint mem (ap201 - 6)),
simp only [←htv_t14] at h_call201,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₁₃ },
try { rw [←htv_range_check_ptr₁₃] at hl_range_check_ptr₁₃ }, try { rw [←htv_range_check_ptr₁₂] at hl_range_check_ptr₁₃ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call201 },
rw [←htv_range_check_ptr₁₂, hl_range_check_ptr₁₂, hl_range_check_ptr₁₁, hl_range_check_ptr₁₀, hl_range_check_ptr₉, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call201,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc201 with temp0,
step_assert_eq hpc202 with temp1,
step_assert_eq hpc203 with temp2,
step_assert_eq hpc204 with temp3,
step_assert_eq hpc205 with temp4,
step_assert_eq hpc206 with temp5,
have a201: cast_EcPoint mem (table.σ_ptr + 84) = t14, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13, htv_range_check_ptr₁₃, htv_t14] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- function call
step_assert_eq hpc207 with arg0,
step_assert_eq hpc208 with arg1,
step_assert_eq hpc209 with arg2,
step_assert_eq hpc210 with arg3,
step_assert_eq hpc211 with arg4,
step_assert_eq hpc212 with arg5,
step_sub hpc213 (auto_sound_fast_ec_add mem _ range_check_ptr₁₃ t14 point _ _ _ _ _ _ _ _ _ _),
{ rw hpc214, norm_num2, exact h_mem_15 },
{ rw hpc214, norm_num2, exact h_mem_4 },
{ rw hpc214, norm_num2, exact h_mem_5 },
{ rw hpc214, norm_num2, exact h_mem_6 },
{ rw hpc214, norm_num2, exact h_mem_7 },
{ rw hpc214, norm_num2, exact h_mem_8 },
{ rw hpc214, norm_num2, exact h_mem_13 },
{ try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13, htv_range_check_ptr₁₃, htv_t14] },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
  try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13, htv_range_check_ptr₁₃, htv_t14] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
{ try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13, htv_range_check_ptr₁₃, htv_t14] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
intros κ_call215 ap215 h_call215,
rcases h_call215 with ⟨rc_m215, rc_mle215, hl_range_check_ptr₁₄, h_call215⟩,
mkdef htv_range_check_ptr₁₄ : range_check_ptr₁₄ = (mem (ap215 - 7)),
simp only [←htv_range_check_ptr₁₄] at h_call215,
mkdef htv_t15 : t15 = (cast_EcPoint mem (ap215 - 6)),
simp only [←htv_t15] at h_call215,
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at hl_range_check_ptr₁₄ },
try { rw [←htv_range_check_ptr₁₄] at hl_range_check_ptr₁₄ }, try { rw [←htv_range_check_ptr₁₃] at hl_range_check_ptr₁₄ },
try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5] at h_call215 },
rw [←htv_range_check_ptr₁₃, hl_range_check_ptr₁₃, hl_range_check_ptr₁₂, hl_range_check_ptr₁₁, hl_range_check_ptr₁₀, hl_range_check_ptr₉, hl_range_check_ptr₈, hl_range_check_ptr₇, hl_range_check_ptr₆, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call215,
clear arg0 arg1 arg2 arg3 arg4 arg5,
-- compound assert eq
step_assert_eq hpc215 with temp0,
step_assert_eq hpc216 with temp1,
step_assert_eq hpc217 with temp2,
step_assert_eq hpc218 with temp3,
step_assert_eq hpc219 with temp4,
step_assert_eq hpc220 with temp5,
have a215: cast_EcPoint mem (table.σ_ptr + 90) = t15, {
  try { ext } ; {
    try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13, htv_range_check_ptr₁₃, htv_t14, htv_range_check_ptr₁₄, htv_t15] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
},
clear temp0 temp1 temp2 temp3 temp4 temp5,
-- return
step_assert_eq hpc221 with hret0,
step_ret hpc222,
-- finish
step_done, use_only [rfl, rfl],
-- range check condition
use_only (rc_m33+rc_m47+rc_m61+rc_m75+rc_m89+rc_m103+rc_m117+rc_m131+rc_m145+rc_m159+rc_m173+rc_m187+rc_m201+rc_m215+0+0), split,
linarith [rc_mle33, rc_mle47, rc_mle61, rc_mle75, rc_mle89, rc_mle103, rc_mle117, rc_mle131, rc_mle145, rc_mle159, rc_mle173, rc_mle187, rc_mle201, rc_mle215],
split,
{ try { norm_num1 }, arith_simps, try { simp only [hret0] },
  try { rw [←htv_range_check_ptr₁₄] }, try { rw [hl_range_check_ptr₁₄] }, try { rw [←htv_range_check_ptr₁₃] }, try { rw [hl_range_check_ptr₁₃] }, try { rw [←htv_range_check_ptr₁₂] }, try { rw [hl_range_check_ptr₁₂] }, try { rw [←htv_range_check_ptr₁₁] }, try { rw [hl_range_check_ptr₁₁] }, try { rw [←htv_range_check_ptr₁₀] }, try { rw [hl_range_check_ptr₁₀] }, try { rw [←htv_range_check_ptr₉] }, try { rw [hl_range_check_ptr₉] }, try { rw [←htv_range_check_ptr₈] }, try { rw [hl_range_check_ptr₈] }, try { rw [←htv_range_check_ptr₇] }, try { rw [hl_range_check_ptr₇] }, try { rw [←htv_range_check_ptr₆] }, try { rw [hl_range_check_ptr₆] }, try { rw [←htv_range_check_ptr₅] }, try { rw [hl_range_check_ptr₅] }, try { rw [←htv_range_check_ptr₄] }, try { rw [hl_range_check_ptr₄] }, try { rw [←htv_range_check_ptr₃] }, try { rw [hl_range_check_ptr₃] }, try { rw [←htv_range_check_ptr₂] }, try { rw [hl_range_check_ptr₂] }, try { rw [←htv_range_check_ptr₁] }, try { rw [hl_range_check_ptr₁] }, try { rw [hin_range_check_ptr] },
  try { ring_nf }, try { arith_simps, refl <|> norm_cast }, try { refl } },
intro rc_h_range_check_ptr, repeat { rw [add_assoc] at rc_h_range_check_ptr },
have rc_h_range_check_ptr' := range_checked_add_right rc_h_range_check_ptr,
-- Final Proof
-- user-provided reduction
suffices auto_spec: auto_spec_build_ec_mul_table mem _ range_check_ptr point table _,
{ apply sound_build_ec_mul_table, apply auto_spec },
-- prove the auto generated assertion
dsimp [auto_spec_build_ec_mul_table],
try { norm_num1 }, try { arith_simps },
use_only [a0],
use_only [a18],
use_only [κ_call33],
use_only [range_check_ptr₁],
use_only [t2],
have rc_h_range_check_ptr₁ := range_checked_offset' rc_h_range_check_ptr,
have rc_h_range_check_ptr₁' := range_checked_add_right rc_h_range_check_ptr₁, try { norm_cast at rc_h_range_check_ptr₁' },
have spec33 := h_call33 rc_h_range_check_ptr',
  try { rw [←hin_range_check_ptr] at spec33 }, try { rw [←htv_range_check_ptr₁] at spec33 },
try { dsimp at spec33, arith_simps at spec33 },
use_only [spec33],
use_only [a33],
use_only [κ_call47],
use_only [range_check_ptr₂],
use_only [t3],
have rc_h_range_check_ptr₂ := range_checked_offset' rc_h_range_check_ptr₁,
have rc_h_range_check_ptr₂' := range_checked_add_right rc_h_range_check_ptr₂, try { norm_cast at rc_h_range_check_ptr₂' },
have spec47 := h_call47 rc_h_range_check_ptr₁',
  try { rw [←hin_range_check_ptr] at spec47 }, try { rw [←hl_range_check_ptr₁] at spec47 }, try { rw [←htv_range_check_ptr₂] at spec47 },
try { dsimp at spec47, arith_simps at spec47 },
use_only [spec47],
use_only [a47],
use_only [κ_call61],
use_only [range_check_ptr₃],
use_only [t4],
have rc_h_range_check_ptr₃ := range_checked_offset' rc_h_range_check_ptr₂,
have rc_h_range_check_ptr₃' := range_checked_add_right rc_h_range_check_ptr₃, try { norm_cast at rc_h_range_check_ptr₃' },
have spec61 := h_call61 rc_h_range_check_ptr₂',
  try { rw [←hin_range_check_ptr] at spec61 }, try { rw [←hl_range_check_ptr₁] at spec61 }, try { rw [←hl_range_check_ptr₂] at spec61 }, try { rw [←htv_range_check_ptr₃] at spec61 },
try { dsimp at spec61, arith_simps at spec61 },
use_only [spec61],
use_only [a61],
use_only [κ_call75],
use_only [range_check_ptr₄],
use_only [t5],
have rc_h_range_check_ptr₄ := range_checked_offset' rc_h_range_check_ptr₃,
have rc_h_range_check_ptr₄' := range_checked_add_right rc_h_range_check_ptr₄, try { norm_cast at rc_h_range_check_ptr₄' },
have spec75 := h_call75 rc_h_range_check_ptr₃',
  try { rw [←hin_range_check_ptr] at spec75 }, try { rw [←hl_range_check_ptr₁] at spec75 }, try { rw [←hl_range_check_ptr₂] at spec75 }, try { rw [←hl_range_check_ptr₃] at spec75 }, try { rw [←htv_range_check_ptr₄] at spec75 },
try { dsimp at spec75, arith_simps at spec75 },
use_only [spec75],
use_only [a75],
use_only [κ_call89],
use_only [range_check_ptr₅],
use_only [t6],
have rc_h_range_check_ptr₅ := range_checked_offset' rc_h_range_check_ptr₄,
have rc_h_range_check_ptr₅' := range_checked_add_right rc_h_range_check_ptr₅, try { norm_cast at rc_h_range_check_ptr₅' },
have spec89 := h_call89 rc_h_range_check_ptr₄',
  try { rw [←hin_range_check_ptr] at spec89 }, try { rw [←hl_range_check_ptr₁] at spec89 }, try { rw [←hl_range_check_ptr₂] at spec89 }, try { rw [←hl_range_check_ptr₃] at spec89 }, try { rw [←hl_range_check_ptr₄] at spec89 }, try { rw [←htv_range_check_ptr₅] at spec89 },
try { dsimp at spec89, arith_simps at spec89 },
use_only [spec89],
use_only [a89],
use_only [κ_call103],
use_only [range_check_ptr₆],
use_only [t7],
have rc_h_range_check_ptr₆ := range_checked_offset' rc_h_range_check_ptr₅,
have rc_h_range_check_ptr₆' := range_checked_add_right rc_h_range_check_ptr₆, try { norm_cast at rc_h_range_check_ptr₆' },
have spec103 := h_call103 rc_h_range_check_ptr₅',
  try { rw [←hin_range_check_ptr] at spec103 }, try { rw [←hl_range_check_ptr₁] at spec103 }, try { rw [←hl_range_check_ptr₂] at spec103 }, try { rw [←hl_range_check_ptr₃] at spec103 }, try { rw [←hl_range_check_ptr₄] at spec103 }, try { rw [←hl_range_check_ptr₅] at spec103 }, try { rw [←htv_range_check_ptr₆] at spec103 },
try { dsimp at spec103, arith_simps at spec103 },
use_only [spec103],
use_only [a103],
use_only [κ_call117],
use_only [range_check_ptr₇],
use_only [t8],
have rc_h_range_check_ptr₇ := range_checked_offset' rc_h_range_check_ptr₆,
have rc_h_range_check_ptr₇' := range_checked_add_right rc_h_range_check_ptr₇, try { norm_cast at rc_h_range_check_ptr₇' },
have spec117 := h_call117 rc_h_range_check_ptr₆',
  try { rw [←hin_range_check_ptr] at spec117 }, try { rw [←hl_range_check_ptr₁] at spec117 }, try { rw [←hl_range_check_ptr₂] at spec117 }, try { rw [←hl_range_check_ptr₃] at spec117 }, try { rw [←hl_range_check_ptr₄] at spec117 }, try { rw [←hl_range_check_ptr₅] at spec117 }, try { rw [←hl_range_check_ptr₆] at spec117 }, try { rw [←htv_range_check_ptr₇] at spec117 },
try { dsimp at spec117, arith_simps at spec117 },
use_only [spec117],
use_only [a117],
use_only [κ_call131],
use_only [range_check_ptr₈],
use_only [t9],
have rc_h_range_check_ptr₈ := range_checked_offset' rc_h_range_check_ptr₇,
have rc_h_range_check_ptr₈' := range_checked_add_right rc_h_range_check_ptr₈, try { norm_cast at rc_h_range_check_ptr₈' },
have spec131 := h_call131 rc_h_range_check_ptr₇',
  try { rw [←hin_range_check_ptr] at spec131 }, try { rw [←hl_range_check_ptr₁] at spec131 }, try { rw [←hl_range_check_ptr₂] at spec131 }, try { rw [←hl_range_check_ptr₃] at spec131 }, try { rw [←hl_range_check_ptr₄] at spec131 }, try { rw [←hl_range_check_ptr₅] at spec131 }, try { rw [←hl_range_check_ptr₆] at spec131 }, try { rw [←hl_range_check_ptr₇] at spec131 }, try { rw [←htv_range_check_ptr₈] at spec131 },
try { dsimp at spec131, arith_simps at spec131 },
use_only [spec131],
use_only [a131],
use_only [κ_call145],
use_only [range_check_ptr₉],
use_only [t10],
have rc_h_range_check_ptr₉ := range_checked_offset' rc_h_range_check_ptr₈,
have rc_h_range_check_ptr₉' := range_checked_add_right rc_h_range_check_ptr₉, try { norm_cast at rc_h_range_check_ptr₉' },
have spec145 := h_call145 rc_h_range_check_ptr₈',
  try { rw [←hin_range_check_ptr] at spec145 }, try { rw [←hl_range_check_ptr₁] at spec145 }, try { rw [←hl_range_check_ptr₂] at spec145 }, try { rw [←hl_range_check_ptr₃] at spec145 }, try { rw [←hl_range_check_ptr₄] at spec145 }, try { rw [←hl_range_check_ptr₅] at spec145 }, try { rw [←hl_range_check_ptr₆] at spec145 }, try { rw [←hl_range_check_ptr₇] at spec145 }, try { rw [←hl_range_check_ptr₈] at spec145 }, try { rw [←htv_range_check_ptr₉] at spec145 },
try { dsimp at spec145, arith_simps at spec145 },
use_only [spec145],
use_only [a145],
use_only [κ_call159],
use_only [range_check_ptr₁₀],
use_only [t11],
have rc_h_range_check_ptr₁₀ := range_checked_offset' rc_h_range_check_ptr₉,
have rc_h_range_check_ptr₁₀' := range_checked_add_right rc_h_range_check_ptr₁₀, try { norm_cast at rc_h_range_check_ptr₁₀' },
have spec159 := h_call159 rc_h_range_check_ptr₉',
  try { rw [←hin_range_check_ptr] at spec159 }, try { rw [←hl_range_check_ptr₁] at spec159 }, try { rw [←hl_range_check_ptr₂] at spec159 }, try { rw [←hl_range_check_ptr₃] at spec159 }, try { rw [←hl_range_check_ptr₄] at spec159 }, try { rw [←hl_range_check_ptr₅] at spec159 }, try { rw [←hl_range_check_ptr₆] at spec159 }, try { rw [←hl_range_check_ptr₇] at spec159 }, try { rw [←hl_range_check_ptr₈] at spec159 }, try { rw [←hl_range_check_ptr₉] at spec159 }, try { rw [←htv_range_check_ptr₁₀] at spec159 },
try { dsimp at spec159, arith_simps at spec159 },
use_only [spec159],
use_only [a159],
use_only [κ_call173],
use_only [range_check_ptr₁₁],
use_only [t12],
have rc_h_range_check_ptr₁₁ := range_checked_offset' rc_h_range_check_ptr₁₀,
have rc_h_range_check_ptr₁₁' := range_checked_add_right rc_h_range_check_ptr₁₁, try { norm_cast at rc_h_range_check_ptr₁₁' },
have spec173 := h_call173 rc_h_range_check_ptr₁₀',
  try { rw [←hin_range_check_ptr] at spec173 }, try { rw [←hl_range_check_ptr₁] at spec173 }, try { rw [←hl_range_check_ptr₂] at spec173 }, try { rw [←hl_range_check_ptr₃] at spec173 }, try { rw [←hl_range_check_ptr₄] at spec173 }, try { rw [←hl_range_check_ptr₅] at spec173 }, try { rw [←hl_range_check_ptr₆] at spec173 }, try { rw [←hl_range_check_ptr₇] at spec173 }, try { rw [←hl_range_check_ptr₈] at spec173 }, try { rw [←hl_range_check_ptr₉] at spec173 }, try { rw [←hl_range_check_ptr₁₀] at spec173 }, try { rw [←htv_range_check_ptr₁₁] at spec173 },
try { dsimp at spec173, arith_simps at spec173 },
use_only [spec173],
use_only [a173],
use_only [κ_call187],
use_only [range_check_ptr₁₂],
use_only [t13],
have rc_h_range_check_ptr₁₂ := range_checked_offset' rc_h_range_check_ptr₁₁,
have rc_h_range_check_ptr₁₂' := range_checked_add_right rc_h_range_check_ptr₁₂, try { norm_cast at rc_h_range_check_ptr₁₂' },
have spec187 := h_call187 rc_h_range_check_ptr₁₁',
  try { rw [←hin_range_check_ptr] at spec187 }, try { rw [←hl_range_check_ptr₁] at spec187 }, try { rw [←hl_range_check_ptr₂] at spec187 }, try { rw [←hl_range_check_ptr₃] at spec187 }, try { rw [←hl_range_check_ptr₄] at spec187 }, try { rw [←hl_range_check_ptr₅] at spec187 }, try { rw [←hl_range_check_ptr₆] at spec187 }, try { rw [←hl_range_check_ptr₇] at spec187 }, try { rw [←hl_range_check_ptr₈] at spec187 }, try { rw [←hl_range_check_ptr₉] at spec187 }, try { rw [←hl_range_check_ptr₁₀] at spec187 }, try { rw [←hl_range_check_ptr₁₁] at spec187 }, try { rw [←htv_range_check_ptr₁₂] at spec187 },
try { dsimp at spec187, arith_simps at spec187 },
use_only [spec187],
use_only [a187],
use_only [κ_call201],
use_only [range_check_ptr₁₃],
use_only [t14],
have rc_h_range_check_ptr₁₃ := range_checked_offset' rc_h_range_check_ptr₁₂,
have rc_h_range_check_ptr₁₃' := range_checked_add_right rc_h_range_check_ptr₁₃, try { norm_cast at rc_h_range_check_ptr₁₃' },
have spec201 := h_call201 rc_h_range_check_ptr₁₂',
  try { rw [←hin_range_check_ptr] at spec201 }, try { rw [←hl_range_check_ptr₁] at spec201 }, try { rw [←hl_range_check_ptr₂] at spec201 }, try { rw [←hl_range_check_ptr₃] at spec201 }, try { rw [←hl_range_check_ptr₄] at spec201 }, try { rw [←hl_range_check_ptr₅] at spec201 }, try { rw [←hl_range_check_ptr₆] at spec201 }, try { rw [←hl_range_check_ptr₇] at spec201 }, try { rw [←hl_range_check_ptr₈] at spec201 }, try { rw [←hl_range_check_ptr₉] at spec201 }, try { rw [←hl_range_check_ptr₁₀] at spec201 }, try { rw [←hl_range_check_ptr₁₁] at spec201 }, try { rw [←hl_range_check_ptr₁₂] at spec201 }, try { rw [←htv_range_check_ptr₁₃] at spec201 },
try { dsimp at spec201, arith_simps at spec201 },
use_only [spec201],
use_only [a201],
use_only [κ_call215],
use_only [range_check_ptr₁₄],
use_only [t15],
have rc_h_range_check_ptr₁₄ := range_checked_offset' rc_h_range_check_ptr₁₃,
have rc_h_range_check_ptr₁₄' := range_checked_add_right rc_h_range_check_ptr₁₄, try { norm_cast at rc_h_range_check_ptr₁₄' },
have spec215 := h_call215 rc_h_range_check_ptr₁₃',
  try { rw [←hin_range_check_ptr] at spec215 }, try { rw [←hl_range_check_ptr₁] at spec215 }, try { rw [←hl_range_check_ptr₂] at spec215 }, try { rw [←hl_range_check_ptr₃] at spec215 }, try { rw [←hl_range_check_ptr₄] at spec215 }, try { rw [←hl_range_check_ptr₅] at spec215 }, try { rw [←hl_range_check_ptr₆] at spec215 }, try { rw [←hl_range_check_ptr₇] at spec215 }, try { rw [←hl_range_check_ptr₈] at spec215 }, try { rw [←hl_range_check_ptr₉] at spec215 }, try { rw [←hl_range_check_ptr₁₀] at spec215 }, try { rw [←hl_range_check_ptr₁₁] at spec215 }, try { rw [←hl_range_check_ptr₁₂] at spec215 }, try { rw [←hl_range_check_ptr₁₃] at spec215 }, try { rw [←htv_range_check_ptr₁₄] at spec215 },
try { dsimp at spec215, arith_simps at spec215 },
use_only [spec215],
use_only [a215],
try { split, trivial <|> linarith },
try { ensures_simps; try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_point, hin_table, htv_range_check_ptr₁, htv_t2, htv_range_check_ptr₂, htv_t3, htv_range_check_ptr₃, htv_t4, htv_range_check_ptr₄, htv_t5, htv_range_check_ptr₅, htv_t6, htv_range_check_ptr₆, htv_t7, htv_range_check_ptr₇, htv_t8, htv_range_check_ptr₈, htv_t9, htv_range_check_ptr₉, htv_t10, htv_range_check_ptr₁₀, htv_t11, htv_range_check_ptr₁₁, htv_t12, htv_range_check_ptr₁₂, htv_t13, htv_range_check_ptr₁₃, htv_t14, htv_range_check_ptr₁₄, htv_t15] }, },
try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
try { dsimp [cast_EcPoint, cast_BigInt3, cast_π_EcPoint] },
try { arith_simps }, try { simp only [hret0] },
try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
end

