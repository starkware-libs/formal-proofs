/-
File: ec_try_get_point_from_x_soundness.lean

Autogenerated file.
-/
import starkware.cairo.lean.semantics.soundness.hoare
import .ec_code
import ..ec_spec
import .ec_unreduced_sqr_soundness
import .ec_validate_reduced_field_element_soundness
import .ec_unreduced_mul_soundness
import .ec_reduce_soundness
open tactic

open starkware.cairo.common.secp256r1.ec
open starkware.cairo.common.cairo_secp.ec_point
open starkware.cairo.common.math
open starkware.cairo.common.secp256r1.field
open starkware.cairo.common.secp256r1.bigint
open starkware.cairo.common.cairo_secp.bigint3
open starkware.cairo.common.secp256r1.constants

variables {F : Type} [field F] [decidable_eq F] [prelude_hyps F]
variable  mem : F → F
variable  σ : register_state F

/- starkware.cairo.common.secp256r1.ec.try_get_point_from_x autogenerated soundness theorem -/

theorem auto_sound_try_get_point_from_x
    -- arguments
    (range_check_ptr : F) (x : BigInt3 mem) (v : F) (result : π_EcPoint mem)
    -- code is in memory at σ.pc
    (h_mem : mem_at mem code_try_get_point_from_x σ.pc)
    -- all dependencies are in memory
    (h_mem_1 : mem_at mem code_assert_nn (σ.pc  - 848))
    (h_mem_2 : mem_at mem code_assert_le (σ.pc  - 844))
    (h_mem_3 : mem_at mem code_assert_nn_le (σ.pc  - 839))
    (h_mem_4 : mem_at mem code_nondet_bigint3 (σ.pc  - 830))
    (h_mem_5 : mem_at mem code_unreduced_mul (σ.pc  - 817))
    (h_mem_6 : mem_at mem code_unreduced_sqr (σ.pc  - 779))
    (h_mem_7 : mem_at mem code_assert_165_bit (σ.pc  - 745))
    (h_mem_8 : mem_at mem code_verify_zero (σ.pc  - 734))
    (h_mem_10 : mem_at mem code_reduce (σ.pc  - 664))
    (h_mem_11 : mem_at mem code_validate_reduced_field_element (σ.pc  - 651))
    -- input arguments on the stack
    (hin_range_check_ptr : range_check_ptr = mem (σ.fp - 8))
    (hin_x : x = cast_BigInt3 mem (σ.fp - 7))
    (hin_v : v = mem (σ.fp - 4))
    (hin_result : result = cast_π_EcPoint mem (mem (σ.fp - 3)))
    -- conclusion
  : ensures_ret mem σ (λ κ τ,
      ∃ μ ≤ κ, rc_ensures mem (rc_bound F) μ (mem (σ.fp - 8)) (mem $ τ.ap - 2)
        (spec_try_get_point_from_x mem κ range_check_ptr x v result (mem (τ.ap - 2)) (mem (τ.ap - 1)))) :=
begin
  apply ensures_of_ensuresb, intro νbound,
  have h_mem_rec := h_mem,
  unpack_memory code_try_get_point_from_x at h_mem with ⟨hpc0, hpc1, hpc2, hpc3, hpc4, hpc5, hpc6, hpc7, hpc8, hpc9, hpc10, hpc11, hpc12, hpc13, hpc14, hpc15, hpc16, hpc17, hpc18, hpc19, hpc20, hpc21, hpc22, hpc23, hpc24, hpc25, hpc26, hpc27, hpc28, hpc29, hpc30, hpc31, hpc32, hpc33, hpc34, hpc35, hpc36, hpc37, hpc38, hpc39, hpc40, hpc41, hpc42, hpc43, hpc44, hpc45, hpc46, hpc47, hpc48, hpc49, hpc50, hpc51, hpc52, hpc53, hpc54, hpc55, hpc56, hpc57, hpc58, hpc59, hpc60, hpc61, hpc62, hpc63, hpc64, hpc65, hpc66, hpc67, hpc68, hpc69, hpc70, hpc71, hpc72, hpc73, hpc74, hpc75, hpc76, hpc77, hpc78, hpc79, hpc80, hpc81, hpc82, hpc83, hpc84, hpc85, hpc86, hpc87, hpc88, hpc89, hpc90, hpc91, hpc92, hpc93, hpc94, hpc95, hpc96, hpc97, hpc98, hpc99, hpc100, hpc101, hpc102, hpc103, hpc104, hpc105, hpc106, hpc107, hpc108, hpc109, hpc110, hpc111, hpc112, hpc113, hpc114, hpc115⟩,
  -- ap += 10
  step_advance_ap hpc0 hpc1,
  -- function call
  step_assert_eq hpc2 with arg0,
  step_assert_eq hpc3 with arg1,
  step_sub hpc4 (auto_sound_assert_nn mem _ range_check_ptr v _ _ _),
  { rw hpc5, norm_num2, exact h_mem_1 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_BigInt3, cast_π_EcPoint] },
    try { arith_simps }, try { simp only [arg0, arg1] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call6 ap6 h_call6,
  rcases h_call6 with ⟨h_call6_ap_offset, h_call6⟩,
  rcases h_call6 with ⟨rc_m6, rc_mle6, hl_range_check_ptr₁, h_call6⟩,
  mkdef htv_range_check_ptr₁ : range_check_ptr₁ = (mem (ap6 - 1)),
  simp only [←htv_range_check_ptr₁] at h_call6,
  try { simp only [arg0 ,arg1] at hl_range_check_ptr₁ },
  try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₁ }, try { rw [←hin_range_check_ptr] at hl_range_check_ptr₁ },
  try { simp only [arg0 ,arg1] at h_call6 },
  rw [hin_range_check_ptr] at h_call6,
  clear arg0 arg1,
  -- function call
  step_assert_eq hpc6 with arg0,
  step_assert_eq hpc7 with arg1,
  step_assert_eq hpc8 with arg2,
  step_sub hpc9 (auto_sound_unreduced_sqr mem _ x _ _),
  { rw hpc10, norm_num2, exact h_mem_6 },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2] },
      try { simp only [h_call6_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call11 ap11 h_call11,
  rcases h_call11 with ⟨h_call11_ap_offset, h_call11⟩,
  mkdef htv_x_square : x_square = (cast_UnreducedBigInt3 mem (ap11 - 3)),
  simp only [←htv_x_square] at h_call11,
  clear arg0 arg1 arg2,
  -- function call
  step_assert_eq hpc11 with arg0,
  step_assert_eq hpc12 with arg1,
  step_assert_eq hpc13 with arg2,
  step_assert_eq hpc14 with arg3,
  step_sub hpc15 (auto_sound_reduce mem _ range_check_ptr₁ x_square _ _ _ _ _ _),
  { rw hpc16, norm_num2, exact h_mem_10 },
  { rw hpc16, norm_num2, exact h_mem_4 },
  { rw hpc16, norm_num2, exact h_mem_7 },
  { rw hpc16, norm_num2, exact h_mem_8 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
    try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3] },
    try { simp only [h_call6_ap_offset, h_call11_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call17 ap17 h_call17,
  rcases h_call17 with ⟨h_call17_ap_offset, h_call17⟩,
  rcases h_call17 with ⟨rc_m17, rc_mle17, hl_range_check_ptr₂, h_call17⟩,
  mkdef htv_range_check_ptr₂ : range_check_ptr₂ = (mem (ap17 - 4)),
  simp only [←htv_range_check_ptr₂] at h_call17,
  mkdef htv_x_square_reduced : x_square_reduced = (cast_BigInt3 mem (ap17 - 3)),
  simp only [←htv_x_square_reduced] at h_call17,
  try { simp only [arg0 ,arg1 ,arg2 ,arg3] at hl_range_check_ptr₂ },
  try { rw [h_call11_ap_offset] at hl_range_check_ptr₂ }, try { arith_simps at hl_range_check_ptr₂ },
  try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₂ }, try { rw [←htv_range_check_ptr₁] at hl_range_check_ptr₂ },
  try { simp only [arg0 ,arg1 ,arg2 ,arg3] at h_call17 },
  try { rw [h_call11_ap_offset] at h_call17 }, try { arith_simps at h_call17 },
  rw [←htv_range_check_ptr₁, hl_range_check_ptr₁, hin_range_check_ptr] at h_call17,
  clear arg0 arg1 arg2 arg3,
  -- function call
  step_assert_eq hpc17 with arg0,
  step_assert_eq hpc18 with arg1,
  step_assert_eq hpc19 with arg2,
  step_assert_eq hpc20 with arg3,
  step_assert_eq hpc21 with arg4,
  step_assert_eq hpc22 with arg5,
  step_sub hpc23 (auto_sound_unreduced_mul mem _ x x_square_reduced _ _ _),
  { rw hpc24, norm_num2, exact h_mem_5 },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call25 ap25 h_call25,
  rcases h_call25 with ⟨h_call25_ap_offset, h_call25⟩,
  mkdef htv_x_cube : x_cube = (cast_UnreducedBigInt3 mem (ap25 - 3)),
  simp only [←htv_x_cube] at h_call25,
  clear arg0 arg1 arg2 arg3 arg4 arg5,
  -- local var
  step_assert_eq hpc25 with temp0,
  step_assert_eq hpc26 with temp1,
  step_assert_eq hpc27 with temp2,
  have lc_x_cube: x_cube = (cast_UnreducedBigInt3 mem (σ.fp)), {
    try { ext } ; {
      try { simp only [htv_x_cube] },
      try { dsimp [cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [temp0, temp1, temp2] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  clear temp0 temp1 temp2,
  -- function call
  step_assert_eq hpc28 with arg0,
  step_sub hpc29 (auto_sound_nondet_bigint3 mem _ range_check_ptr₂ _ _),
  { rw hpc30, norm_num2, exact h_mem_4 },
  { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube] },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
    try { arith_simps }, try { simp only [arg0] },
    try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
  intros κ_call31 ap31 h_call31,
  rcases h_call31 with ⟨h_call31_ap_offset, h_call31⟩,
  rcases h_call31 with ⟨rc_m31, rc_mle31, hl_range_check_ptr₃, h_call31⟩,
  mkdef htv_range_check_ptr₃ : range_check_ptr₃ = (mem (ap31 - 4)),
  simp only [←htv_range_check_ptr₃] at h_call31,
  mkdef htv_y : y = (cast_BigInt3 mem (ap31 - 3)),
  simp only [←htv_y] at h_call31,
  try { simp only [arg0] at hl_range_check_ptr₃ },
  try { rw [h_call25_ap_offset] at hl_range_check_ptr₃ }, try { arith_simps at hl_range_check_ptr₃ },
  try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₃ }, try { rw [←htv_range_check_ptr₂] at hl_range_check_ptr₃ },
  try { simp only [arg0] at h_call31 },
  try { rw [h_call25_ap_offset] at h_call31 }, try { arith_simps at h_call31 },
  rw [←htv_range_check_ptr₂, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call31,
  clear arg0,
  -- local var
  step_assert_eq hpc31 with temp0,
  step_assert_eq hpc32 with temp1,
  step_assert_eq hpc33 with temp2,
  have lc_y: y = (cast_BigInt3 mem (σ.fp + 3)), {
    try { ext } ; {
      try { simp only [htv_y] },
      try { dsimp [cast_BigInt3] },
      try { arith_simps }, try { simp only [temp0, temp1, temp2] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  clear temp0 temp1 temp2,
  -- function call
  step_assert_eq hpc34 with arg0,
  step_assert_eq hpc35 with arg1,
  step_assert_eq hpc36 with arg2,
  step_sub hpc37 (auto_sound_unreduced_sqr mem _ y _ _),
  { rw hpc38, norm_num2, exact h_mem_6 },
  { try { ext } ; {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  intros κ_call39 ap39 h_call39,
  rcases h_call39 with ⟨h_call39_ap_offset, h_call39⟩,
  mkdef htv_y_square : y_square = (cast_UnreducedBigInt3 mem (ap39 - 3)),
  simp only [←htv_y_square] at h_call39,
  clear arg0 arg1 arg2,
  -- local var
  step_assert_eq hpc39 with temp0,
  step_assert_eq hpc40 with temp1,
  step_assert_eq hpc41 with temp2,
  have lc_y_square: y_square = (cast_UnreducedBigInt3 mem (σ.fp + 6)), {
    try { ext } ; {
      try { simp only [htv_y_square] },
      try { dsimp [cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [temp0, temp1, temp2] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
  clear temp0 temp1 temp2,
  -- local var
  mkdef lc_is_on_curve : is_on_curve = (mem (σ.fp + 9)),
  -- if statement
  step_jnz hpc42 hpc43 with hcond hcond,
  {
    -- if: positive branch
    have a42 : is_on_curve = 0, {
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [hcond] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
    },
    try { dsimp at a42 }, try { arith_simps at a42 },
    clear hcond,
    -- function call
    step_assert_eq hpc44 hpc45 with arg0,
    step_assert_eq hpc46 with arg1,
    step_assert_eq hpc47 hpc48 with arg2,
    step_assert_eq hpc49 with arg3,
    step_assert_eq hpc50 hpc51 with arg4,
    step_assert_eq hpc52 with arg5,
    step_assert_eq hpc53 hpc54 with arg6,
    step_assert_eq hpc55 with arg7,
    step_assert_eq hpc56 hpc57 with arg8,
    step_assert_eq hpc58 with arg9,
    step_assert_eq hpc59 hpc60 with arg10,
    step_assert_eq hpc61 with arg11,
    step_assert_eq hpc62 with arg12,
    step_assert_eq hpc63 with arg13,
    step_assert_eq hpc64 with arg14,
    step_assert_eq hpc65 with arg15,
    step_sub hpc66 (auto_sound_verify_zero mem _ range_check_ptr₃ {
      d0 := x_cube.d0 + ALPHA * x.d0 + BETA0 + y_square.d0,
      d1 := x_cube.d1 + ALPHA * x.d1 + BETA1 + y_square.d1,
      d2 := x_cube.d2 + ALPHA * x.d2 + BETA2 + y_square.d2
    } _ _ _ _),
    { rw hpc67, norm_num2, exact h_mem_8 },
    { rw hpc67, norm_num2, exact h_mem_7 },
    { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
    { try { ext } ; {
        try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve] },
        try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
        try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
        try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15] },
        try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
        try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
    intros κ_call68 ap68 h_call68,
    rcases h_call68 with ⟨h_call68_ap_offset, h_call68⟩,
    rcases h_call68 with ⟨rc_m68, rc_mle68, hl_range_check_ptr₄, h_call68⟩,
    mkdef htv_range_check_ptr₄ : range_check_ptr₄ = (mem (ap68 - 1)),
    simp only [←htv_range_check_ptr₄] at h_call68,
    try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15] at hl_range_check_ptr₄ },
    try { rw [h_call39_ap_offset] at hl_range_check_ptr₄ }, try { arith_simps at hl_range_check_ptr₄ },
    try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₄ }, try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₄ },
    try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15] at h_call68 },
    try { rw [h_call39_ap_offset] at h_call68 }, try { arith_simps at h_call68 },
    rw [←htv_range_check_ptr₃, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call68,
    clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15,
    -- return
    step_assert_eq hpc68 hpc69 with hret0,
    step_ret hpc70,
    -- finish
    step_done, use_only [rfl, rfl],
    -- range check condition
    use_only (rc_m6+rc_m17+rc_m31+rc_m68+0+0), split,
    linarith [rc_mle6, rc_mle17, rc_mle31, rc_mle68],
    split,
    { try { norm_num1 }, arith_simps, try { simp only [hret0] },
      try { rw [←htv_range_check_ptr₄] }, try { rw [hl_range_check_ptr₄] }, try { rw [←htv_range_check_ptr₃] }, try { rw [hl_range_check_ptr₃] }, try { rw [←htv_range_check_ptr₂] }, try { rw [hl_range_check_ptr₂] }, try { rw [←htv_range_check_ptr₁] }, try { rw [hl_range_check_ptr₁] }, try { rw [hin_range_check_ptr] },
      try { ring_nf }, try { arith_simps, refl <|> norm_cast }, try { refl } },
    intro rc_h_range_check_ptr, repeat { rw [add_assoc] at rc_h_range_check_ptr },
    have rc_h_range_check_ptr' := range_checked_add_right rc_h_range_check_ptr,
    -- Final Proof
    -- user-provided reduction
    suffices auto_spec: auto_spec_try_get_point_from_x mem _ range_check_ptr x v result _ _,
    { apply sound_try_get_point_from_x, apply auto_spec },
    -- prove the auto generated assertion
    dsimp [auto_spec_try_get_point_from_x],
    try { norm_num1 }, try { arith_simps },
    use_only [κ_call6],
    use_only [range_check_ptr₁],
    have rc_h_range_check_ptr₁ := range_checked_offset' rc_h_range_check_ptr,
    have rc_h_range_check_ptr₁' := range_checked_add_right rc_h_range_check_ptr₁, try { norm_cast at rc_h_range_check_ptr₁' },
    have spec6 := h_call6 rc_h_range_check_ptr',
      try { rw [←hin_range_check_ptr] at spec6 }, try { rw [←htv_range_check_ptr₁] at spec6 },
    try { dsimp at spec6, arith_simps at spec6 },
    use_only [spec6],
    use_only [κ_call11],
    use_only [x_square],
    try { dsimp at h_call11, arith_simps at h_call11 },
    try { use_only [h_call11] },
    use_only [κ_call17],
    use_only [range_check_ptr₂],
    use_only [x_square_reduced],
    have rc_h_range_check_ptr₂ := range_checked_offset' rc_h_range_check_ptr₁,
    have rc_h_range_check_ptr₂' := range_checked_add_right rc_h_range_check_ptr₂, try { norm_cast at rc_h_range_check_ptr₂' },
    have spec17 := h_call17 rc_h_range_check_ptr₁',
      try { rw [←hin_range_check_ptr] at spec17 }, try { rw [←hl_range_check_ptr₁] at spec17 }, try { rw [←htv_range_check_ptr₂] at spec17 },
    try { dsimp at spec17, arith_simps at spec17 },
    use_only [spec17],
    use_only [κ_call25],
    use_only [x_cube],
    try { dsimp at h_call25, arith_simps at h_call25 },
    try { use_only [h_call25] },
    use_only [κ_call31],
    use_only [range_check_ptr₃],
    use_only [y],
    have rc_h_range_check_ptr₃ := range_checked_offset' rc_h_range_check_ptr₂,
    have rc_h_range_check_ptr₃' := range_checked_add_right rc_h_range_check_ptr₃, try { norm_cast at rc_h_range_check_ptr₃' },
    have spec31 := h_call31 rc_h_range_check_ptr₂',
      try { rw [←hin_range_check_ptr] at spec31 }, try { rw [←hl_range_check_ptr₁] at spec31 }, try { rw [←hl_range_check_ptr₂] at spec31 }, try { rw [←htv_range_check_ptr₃] at spec31 },
    try { dsimp at spec31, arith_simps at spec31 },
    use_only [spec31],
    use_only [κ_call39],
    use_only [y_square],
    try { dsimp at h_call39, arith_simps at h_call39 },
    try { use_only [h_call39] },
    use_only [is_on_curve],
    right,
    use_only [a42],
    use_only [κ_call68],
    use_only [range_check_ptr₄],
    have rc_h_range_check_ptr₄ := range_checked_offset' rc_h_range_check_ptr₃,
    have rc_h_range_check_ptr₄' := range_checked_add_right rc_h_range_check_ptr₄, try { norm_cast at rc_h_range_check_ptr₄' },
    have spec68 := h_call68 rc_h_range_check_ptr₃',
      try { rw [←hin_range_check_ptr] at spec68 }, try { rw [←hl_range_check_ptr₁] at spec68 }, try { rw [←hl_range_check_ptr₂] at spec68 }, try { rw [←hl_range_check_ptr₃] at spec68 }, try { rw [←htv_range_check_ptr₄] at spec68 },
    try { dsimp at spec68, arith_simps at spec68 },
    use_only [spec68],
    try { split, trivial <|> linarith },
    try { ensures_simps; try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve, htv_range_check_ptr₄] }, },
    try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
    try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
    try { arith_simps }, try { simp only [hret0] },
    try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset, h_call68_ap_offset] },
    try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
  },
  {
    -- if: negative branch
    have a42 : is_on_curve ≠ 0, {
      try { simp only [ne.def] },
      try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [hcond] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
    },
    try { dsimp at a42 }, try { arith_simps at a42 },
    clear hcond,
    -- function call
    step_assert_eq hpc71 with arg0,
    step_assert_eq hpc72 with arg1,
    step_assert_eq hpc73 with arg2,
    step_assert_eq hpc74 with arg3,
    step_sub hpc75 (auto_sound_validate_reduced_field_element mem _ range_check_ptr₃ y _ _ _ _ _ _),
    { rw hpc76, norm_num2, exact h_mem_11 },
    { rw hpc76, norm_num2, exact h_mem_1 },
    { rw hpc76, norm_num2, exact h_mem_2 },
    { rw hpc76, norm_num2, exact h_mem_3 },
    { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
    { try { ext } ; {
        try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve] },
        try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
        try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
        try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3] },
        try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
        try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
    intros κ_call77 ap77 h_call77,
    rcases h_call77 with ⟨rc_m77, rc_mle77, hl_range_check_ptr₄, h_call77⟩,
    mkdef htv_range_check_ptr₄ : range_check_ptr₄ = (mem (ap77 - 1)),
    simp only [←htv_range_check_ptr₄] at h_call77,
    try { simp only [arg0 ,arg1 ,arg2 ,arg3] at hl_range_check_ptr₄ },
    try { rw [h_call39_ap_offset] at hl_range_check_ptr₄ }, try { arith_simps at hl_range_check_ptr₄ },
    try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₄ }, try { rw [←htv_range_check_ptr₃] at hl_range_check_ptr₄ },
    try { simp only [arg0 ,arg1 ,arg2 ,arg3] at h_call77 },
    try { rw [h_call39_ap_offset] at h_call77 }, try { arith_simps at h_call77 },
    rw [←htv_range_check_ptr₃, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call77,
    clear arg0 arg1 arg2 arg3,
    -- function call
    step_assert_eq hpc77 with arg0,
    step_assert_eq hpc78 with arg1,
    step_assert_eq hpc79 hpc80 with arg2,
    have h_δ77_c0 : ∀ x : F, x / (2 : ℤ) = x * (-1809251394333065606848661391547535052811553607665798349986546028067936010240 : ℤ),
    { intro x,  apply div_eq_mul_inv', apply PRIME.int_cast_mul_eq_one, rw [PRIME], try { simp_int_casts }, norm_num1 },
    have h_δ77_c0_fz : ∀ x : F, x / 2 = x / (2 : ℤ), { intro x, norm_cast }, 
    step_sub hpc81 (auto_sound_assert_nn mem _ range_check_ptr₄ ((y.d0 + v) / (2 : ℤ)) _ _ _),
    { rw hpc82, norm_num2, exact h_mem_1 },
    { try { simp only [h_δ77_c0_fz, h_δ77_c0] }, try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve, htv_range_check_ptr₄] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
    { try { simp only [h_δ77_c0_fz, h_δ77_c0] }, try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve, htv_range_check_ptr₄] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
    intros κ_call83 ap83 h_call83,
    rcases h_call83 with ⟨h_call83_ap_offset, h_call83⟩,
    rcases h_call83 with ⟨rc_m83, rc_mle83, hl_range_check_ptr₅, h_call83⟩,
    mkdef htv_range_check_ptr₅ : range_check_ptr₅ = (mem (ap83 - 1)),
    simp only [←htv_range_check_ptr₅] at h_call83,
    try { simp only [arg0 ,arg1 ,arg2] at hl_range_check_ptr₅ },
    try { rw [←htv_range_check_ptr₅] at hl_range_check_ptr₅ }, try { rw [←htv_range_check_ptr₄] at hl_range_check_ptr₅ },
    try { simp only [arg0 ,arg1 ,arg2] at h_call83 },
    rw [←htv_range_check_ptr₄, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call83,
    clear arg0 arg1 arg2,
    -- function call
    step_assert_eq hpc83 hpc84 with arg0,
    step_assert_eq hpc85 with arg1,
    step_assert_eq hpc86 hpc87 with arg2,
    step_assert_eq hpc88 with arg3,
    step_assert_eq hpc89 hpc90 with arg4,
    step_assert_eq hpc91 with arg5,
    step_assert_eq hpc92 hpc93 with arg6,
    step_assert_eq hpc94 with arg7,
    step_assert_eq hpc95 hpc96 with arg8,
    step_assert_eq hpc97 with arg9,
    step_assert_eq hpc98 hpc99 with arg10,
    step_assert_eq hpc100 with arg11,
    step_assert_eq hpc101 with arg12,
    step_assert_eq hpc102 with arg13,
    step_assert_eq hpc103 with arg14,
    step_assert_eq hpc104 with arg15,
    step_sub hpc105 (auto_sound_verify_zero mem _ range_check_ptr₅ {
      d0 := x_cube.d0 + ALPHA * x.d0 + BETA0 - y_square.d0,
      d1 := x_cube.d1 + ALPHA * x.d1 + BETA1 - y_square.d1,
      d2 := x_cube.d2 + ALPHA * x.d2 + BETA2 - y_square.d2
    } _ _ _ _),
    { rw hpc106, norm_num2, exact h_mem_8 },
    { rw hpc106, norm_num2, exact h_mem_7 },
    { try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve, htv_range_check_ptr₄, htv_range_check_ptr₅] },
      try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
      try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
      try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, (eq_sub_of_eq_add arg13), (eq_sub_of_eq_add arg14), (eq_sub_of_eq_add arg15)] },
      try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset, h_call83_ap_offset] },
      try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } }, },
    { try { ext } ; {
        try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve, htv_range_check_ptr₄, htv_range_check_ptr₅] },
        try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
        try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
        try { arith_simps }, try { simp only [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, (eq_sub_of_eq_add arg13), (eq_sub_of_eq_add arg14), (eq_sub_of_eq_add arg15)] },
        try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset, h_call83_ap_offset] },
        try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },}, },
    intros κ_call107 ap107 h_call107,
    rcases h_call107 with ⟨h_call107_ap_offset, h_call107⟩,
    rcases h_call107 with ⟨rc_m107, rc_mle107, hl_range_check_ptr₆, h_call107⟩,
    mkdef htv_range_check_ptr₆ : range_check_ptr₆ = (mem (ap107 - 1)),
    simp only [←htv_range_check_ptr₆] at h_call107,
    try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15] at hl_range_check_ptr₆ },
    try { rw [←htv_range_check_ptr₆] at hl_range_check_ptr₆ }, try { rw [←htv_range_check_ptr₅] at hl_range_check_ptr₆ },
    try { simp only [arg0 ,arg1 ,arg2 ,arg3 ,arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,arg9 ,arg10 ,arg11 ,arg12 ,arg13 ,arg14 ,arg15] at h_call107 },
    rw [←htv_range_check_ptr₅, hl_range_check_ptr₅, hl_range_check_ptr₄, hl_range_check_ptr₃, hl_range_check_ptr₂, hl_range_check_ptr₁, hin_range_check_ptr] at h_call107,
    clear arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15,
    -- compound assert eq
    step_assert_eq hpc107 with temp0,
    step_assert_eq hpc108 with temp1,
    step_assert_eq hpc109 with temp2,
    step_assert_eq hpc110 with temp3,
    step_assert_eq hpc111 with temp4,
    step_assert_eq hpc112 with temp5,
    have a107: cast_EcPoint mem result = {
      x := x,
      y := y
    }, {
      try { ext } ; {
        try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve, htv_range_check_ptr₄, htv_range_check_ptr₅, htv_range_check_ptr₆] },
        try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
        try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
        try { arith_simps }, try { simp only [temp0.symm, temp1.symm, temp2.symm, temp3.symm, temp4.symm, temp5.symm] },
        try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset, h_call83_ap_offset, h_call107_ap_offset] },
        try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },},
  },
  clear temp0 temp1 temp2 temp3 temp4 temp5,
  -- return
  step_assert_eq hpc113 hpc114 with hret0,
  step_ret hpc115,
  -- finish
  step_done, use_only [rfl, rfl],
  -- range check condition
  use_only (rc_m6+rc_m17+rc_m31+rc_m77+rc_m83+rc_m107+0+0), split,
  linarith [rc_mle6, rc_mle17, rc_mle31, rc_mle77, rc_mle83, rc_mle107],
  split,
  { try { norm_num1 }, arith_simps, try { simp only [hret0] },
    try { rw [←htv_range_check_ptr₆] }, try { rw [hl_range_check_ptr₆] }, try { rw [←htv_range_check_ptr₅] }, try { rw [hl_range_check_ptr₅] }, try { rw [←htv_range_check_ptr₄] }, try { rw [hl_range_check_ptr₄] }, try { rw [←htv_range_check_ptr₃] }, try { rw [hl_range_check_ptr₃] }, try { rw [←htv_range_check_ptr₂] }, try { rw [hl_range_check_ptr₂] }, try { rw [←htv_range_check_ptr₁] }, try { rw [hl_range_check_ptr₁] }, try { rw [hin_range_check_ptr] },
    try { ring_nf }, try { arith_simps, refl <|> norm_cast }, try { refl } },
  intro rc_h_range_check_ptr, repeat { rw [add_assoc] at rc_h_range_check_ptr },
  have rc_h_range_check_ptr' := range_checked_add_right rc_h_range_check_ptr,
  -- Final Proof
  -- user-provided reduction
  suffices auto_spec: auto_spec_try_get_point_from_x mem _ range_check_ptr x v result _ _,
  { apply sound_try_get_point_from_x, apply auto_spec },
  -- prove the auto generated assertion
  dsimp [auto_spec_try_get_point_from_x],
  try { norm_num1 }, try { arith_simps },
  use_only [κ_call6],
  use_only [range_check_ptr₁],
  have rc_h_range_check_ptr₁ := range_checked_offset' rc_h_range_check_ptr,
  have rc_h_range_check_ptr₁' := range_checked_add_right rc_h_range_check_ptr₁, try { norm_cast at rc_h_range_check_ptr₁' },
  have spec6 := h_call6 rc_h_range_check_ptr',
    try { rw [←hin_range_check_ptr] at spec6 }, try { rw [←htv_range_check_ptr₁] at spec6 },
  try { dsimp at spec6, arith_simps at spec6 },
  use_only [spec6],
  use_only [κ_call11],
  use_only [x_square],
  try { dsimp at h_call11, arith_simps at h_call11 },
  try { use_only [h_call11] },
  use_only [κ_call17],
  use_only [range_check_ptr₂],
  use_only [x_square_reduced],
  have rc_h_range_check_ptr₂ := range_checked_offset' rc_h_range_check_ptr₁,
  have rc_h_range_check_ptr₂' := range_checked_add_right rc_h_range_check_ptr₂, try { norm_cast at rc_h_range_check_ptr₂' },
  have spec17 := h_call17 rc_h_range_check_ptr₁',
    try { rw [←hin_range_check_ptr] at spec17 }, try { rw [←hl_range_check_ptr₁] at spec17 }, try { rw [←htv_range_check_ptr₂] at spec17 },
  try { dsimp at spec17, arith_simps at spec17 },
  use_only [spec17],
  use_only [κ_call25],
  use_only [x_cube],
  try { dsimp at h_call25, arith_simps at h_call25 },
  try { use_only [h_call25] },
  use_only [κ_call31],
  use_only [range_check_ptr₃],
  use_only [y],
  have rc_h_range_check_ptr₃ := range_checked_offset' rc_h_range_check_ptr₂,
  have rc_h_range_check_ptr₃' := range_checked_add_right rc_h_range_check_ptr₃, try { norm_cast at rc_h_range_check_ptr₃' },
  have spec31 := h_call31 rc_h_range_check_ptr₂',
    try { rw [←hin_range_check_ptr] at spec31 }, try { rw [←hl_range_check_ptr₁] at spec31 }, try { rw [←hl_range_check_ptr₂] at spec31 }, try { rw [←htv_range_check_ptr₃] at spec31 },
  try { dsimp at spec31, arith_simps at spec31 },
  use_only [spec31],
  use_only [κ_call39],
  use_only [y_square],
  try { dsimp at h_call39, arith_simps at h_call39 },
  try { use_only [h_call39] },
  use_only [is_on_curve],
  left,
  use_only [a42],
  use_only [κ_call77],
  use_only [range_check_ptr₄],
  have rc_h_range_check_ptr₄ := range_checked_offset' rc_h_range_check_ptr₃,
  have rc_h_range_check_ptr₄' := range_checked_add_right rc_h_range_check_ptr₄, try { norm_cast at rc_h_range_check_ptr₄' },
  have spec77 := h_call77 rc_h_range_check_ptr₃',
    try { rw [←hin_range_check_ptr] at spec77 }, try { rw [←hl_range_check_ptr₁] at spec77 }, try { rw [←hl_range_check_ptr₂] at spec77 }, try { rw [←hl_range_check_ptr₃] at spec77 }, try { rw [←htv_range_check_ptr₄] at spec77 },
  try { dsimp at spec77, arith_simps at spec77 },
  use_only [spec77],
  use_only [κ_call83],
  use_only [range_check_ptr₅],
  have rc_h_range_check_ptr₅ := range_checked_offset' rc_h_range_check_ptr₄,
  have rc_h_range_check_ptr₅' := range_checked_add_right rc_h_range_check_ptr₅, try { norm_cast at rc_h_range_check_ptr₅' },
  have spec83 := h_call83 rc_h_range_check_ptr₄',
    try { rw [←hin_range_check_ptr] at spec83 }, try { rw [←hl_range_check_ptr₁] at spec83 }, try { rw [←hl_range_check_ptr₂] at spec83 }, try { rw [←hl_range_check_ptr₃] at spec83 }, try { rw [←hl_range_check_ptr₄] at spec83 }, try { rw [←htv_range_check_ptr₅] at spec83 },
  try { dsimp at spec83, arith_simps at spec83 },
  use_only [spec83],
  use_only [κ_call107],
  use_only [range_check_ptr₆],
  have rc_h_range_check_ptr₆ := range_checked_offset' rc_h_range_check_ptr₅,
  have rc_h_range_check_ptr₆' := range_checked_add_right rc_h_range_check_ptr₆, try { norm_cast at rc_h_range_check_ptr₆' },
  have spec107 := h_call107 rc_h_range_check_ptr₅',
    try { rw [←hin_range_check_ptr] at spec107 }, try { rw [←hl_range_check_ptr₁] at spec107 }, try { rw [←hl_range_check_ptr₂] at spec107 }, try { rw [←hl_range_check_ptr₃] at spec107 }, try { rw [←hl_range_check_ptr₄] at spec107 }, try { rw [←hl_range_check_ptr₅] at spec107 }, try { rw [←htv_range_check_ptr₆] at spec107 },
  try { dsimp at spec107, arith_simps at spec107 },
  use_only [spec107],
  use_only [a107],
  try { split, trivial <|> linarith },
  try { ensures_simps; try { simp only [add_neg_eq_sub, hin_range_check_ptr, hin_x, hin_v, hin_result, htv_range_check_ptr₁, htv_x_square, htv_range_check_ptr₂, htv_x_square_reduced, htv_x_cube, lc_x_cube, htv_range_check_ptr₃, htv_y, lc_y, htv_y_square, lc_y_square, lc_is_on_curve, htv_range_check_ptr₄, htv_range_check_ptr₅, htv_range_check_ptr₆] }, },
  try { simp only [eq_EcPoint_π_cast, coe_EcPoint_π_cast] },
  try { dsimp [cast_BigInt3, cast_π_EcPoint, cast_UnreducedBigInt3] },
  try { arith_simps }, try { simp only [hret0] },
  try { simp only [h_call6_ap_offset, h_call11_ap_offset, h_call17_ap_offset, h_call25_ap_offset, h_call31_ap_offset, h_call39_ap_offset, h_call83_ap_offset, h_call107_ap_offset] },
  try { arith_simps; try { split }; triv <|> refl <|> simp <|> abel; try { norm_num } },
  }
end

